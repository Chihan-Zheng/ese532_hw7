// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Filter_HW_Filter_vertical_HW (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        Output_r_dout,
        Output_r_empty_n,
        Output_r_read,
        tempStream_dout,
        tempStream_empty_n,
        tempStream_read
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_pp0_stage0 = 76'd2;
parameter    ap_ST_fsm_state4 = 76'd4;
parameter    ap_ST_fsm_state5 = 76'd8;
parameter    ap_ST_fsm_state6 = 76'd16;
parameter    ap_ST_fsm_pp1_stage0 = 76'd32;
parameter    ap_ST_fsm_state13 = 76'd64;
parameter    ap_ST_fsm_state14 = 76'd128;
parameter    ap_ST_fsm_state15 = 76'd256;
parameter    ap_ST_fsm_state16 = 76'd512;
parameter    ap_ST_fsm_state17 = 76'd1024;
parameter    ap_ST_fsm_state18 = 76'd2048;
parameter    ap_ST_fsm_state19 = 76'd4096;
parameter    ap_ST_fsm_state20 = 76'd8192;
parameter    ap_ST_fsm_state21 = 76'd16384;
parameter    ap_ST_fsm_state22 = 76'd32768;
parameter    ap_ST_fsm_state23 = 76'd65536;
parameter    ap_ST_fsm_state24 = 76'd131072;
parameter    ap_ST_fsm_state25 = 76'd262144;
parameter    ap_ST_fsm_state26 = 76'd524288;
parameter    ap_ST_fsm_state27 = 76'd1048576;
parameter    ap_ST_fsm_state28 = 76'd2097152;
parameter    ap_ST_fsm_state29 = 76'd4194304;
parameter    ap_ST_fsm_state30 = 76'd8388608;
parameter    ap_ST_fsm_state31 = 76'd16777216;
parameter    ap_ST_fsm_state32 = 76'd33554432;
parameter    ap_ST_fsm_state33 = 76'd67108864;
parameter    ap_ST_fsm_state34 = 76'd134217728;
parameter    ap_ST_fsm_state35 = 76'd268435456;
parameter    ap_ST_fsm_state36 = 76'd536870912;
parameter    ap_ST_fsm_state37 = 76'd1073741824;
parameter    ap_ST_fsm_state38 = 76'd2147483648;
parameter    ap_ST_fsm_state39 = 76'd4294967296;
parameter    ap_ST_fsm_state40 = 76'd8589934592;
parameter    ap_ST_fsm_state41 = 76'd17179869184;
parameter    ap_ST_fsm_state42 = 76'd34359738368;
parameter    ap_ST_fsm_state43 = 76'd68719476736;
parameter    ap_ST_fsm_state44 = 76'd137438953472;
parameter    ap_ST_fsm_state45 = 76'd274877906944;
parameter    ap_ST_fsm_state46 = 76'd549755813888;
parameter    ap_ST_fsm_state47 = 76'd1099511627776;
parameter    ap_ST_fsm_state48 = 76'd2199023255552;
parameter    ap_ST_fsm_state49 = 76'd4398046511104;
parameter    ap_ST_fsm_state50 = 76'd8796093022208;
parameter    ap_ST_fsm_state51 = 76'd17592186044416;
parameter    ap_ST_fsm_state52 = 76'd35184372088832;
parameter    ap_ST_fsm_state53 = 76'd70368744177664;
parameter    ap_ST_fsm_state54 = 76'd140737488355328;
parameter    ap_ST_fsm_state55 = 76'd281474976710656;
parameter    ap_ST_fsm_state56 = 76'd562949953421312;
parameter    ap_ST_fsm_state57 = 76'd1125899906842624;
parameter    ap_ST_fsm_state58 = 76'd2251799813685248;
parameter    ap_ST_fsm_state59 = 76'd4503599627370496;
parameter    ap_ST_fsm_state60 = 76'd9007199254740992;
parameter    ap_ST_fsm_state61 = 76'd18014398509481984;
parameter    ap_ST_fsm_state62 = 76'd36028797018963968;
parameter    ap_ST_fsm_state63 = 76'd72057594037927936;
parameter    ap_ST_fsm_state64 = 76'd144115188075855872;
parameter    ap_ST_fsm_state65 = 76'd288230376151711744;
parameter    ap_ST_fsm_state66 = 76'd576460752303423488;
parameter    ap_ST_fsm_state67 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state68 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state69 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state70 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state71 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state72 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state73 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state74 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state75 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state76 = 76'd590295810358705651712;
parameter    ap_ST_fsm_state77 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state78 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_state79 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_state80 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_pp2_stage0 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state83 = 76'd37778931862957161709568;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [15:0] m_axi_gmem_WDATA;
output  [1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [15:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] Output_r_dout;
input   Output_r_empty_n;
output   Output_r_read;
input  [7:0] tempStream_dout;
input   tempStream_empty_n;
output   tempStream_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_BREADY;
reg Output_r_read;
reg tempStream_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state6;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp1_iter5;
wire    ap_block_pp1_stage0;
reg   [0:0] trunc_ln104_reg_884;
reg   [0:0] trunc_ln104_reg_884_pp1_iter4_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state80;
reg   [0:0] icmp_ln103_reg_850;
reg    Output_r_blk_n;
reg    tempStream_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln97_reg_826;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln118_reg_959;
reg   [11:0] indvar_flatten_reg_413;
reg   [2:0] j_reg_424;
reg   [8:0] i_reg_435;
reg   [8:0] X_reg_469;
reg   [7:0] phi_ln114_reg_480;
reg   [8:0] i_1_reg_492;
reg   [63:0] Output_read_reg_816;
wire   [11:0] add_ln97_fu_503_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln97_fu_509_p2;
wire   [8:0] select_ln87_fu_521_p3;
reg   [8:0] select_ln87_reg_830;
wire   [2:0] select_ln97_fu_535_p3;
reg   [2:0] select_ln97_reg_835;
wire   [8:0] add_ln98_fu_543_p2;
wire   [16:0] add_ln103_1_fu_559_p2;
reg   [16:0] add_ln103_1_reg_845;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln103_fu_565_p2;
wire   [8:0] add_ln103_fu_571_p2;
reg   [8:0] add_ln103_reg_854;
reg   [63:0] gmem_addr_reg_859;
wire   [8:0] add_ln104_fu_606_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state10_pp1_stage0_iter3;
wire    ap_block_state11_pp1_stage0_iter4;
wire    ap_block_state12_pp1_stage0_iter5;
reg    ap_block_state12_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln104_fu_612_p2;
reg   [0:0] icmp_ln104_reg_870;
reg   [0:0] icmp_ln104_reg_870_pp1_iter1_reg;
reg   [0:0] icmp_ln104_reg_870_pp1_iter2_reg;
reg   [0:0] icmp_ln104_reg_870_pp1_iter3_reg;
reg   [0:0] icmp_ln104_reg_870_pp1_iter4_reg;
wire   [63:0] zext_ln104_fu_618_p1;
reg   [63:0] zext_ln104_reg_874;
reg   [63:0] zext_ln104_reg_874_pp1_iter1_reg;
reg   [63:0] zext_ln104_reg_874_pp1_iter2_reg;
wire   [0:0] trunc_ln104_fu_623_p1;
reg   [0:0] trunc_ln104_reg_884_pp1_iter1_reg;
reg   [0:0] trunc_ln104_reg_884_pp1_iter2_reg;
reg   [0:0] trunc_ln104_reg_884_pp1_iter3_reg;
wire   [8:0] tmp2_i_i_fu_683_p2;
reg   [8:0] tmp2_i_i_reg_934;
wire   [15:0] or_ln_fu_764_p3;
reg   [15:0] or_ln_reg_940;
wire   [7:0] select_ln114_fu_772_p3;
reg   [7:0] select_ln114_reg_945;
reg    ap_enable_reg_pp1_iter4;
wire   [0:0] icmp_ln117_fu_779_p2;
reg   [0:0] icmp_ln117_reg_950;
wire    ap_CS_fsm_state13;
wire   [8:0] add_ln118_fu_785_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state81_pp2_stage0_iter0;
reg    ap_block_state82_pp2_stage0_iter1;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln118_fu_791_p2;
wire   [63:0] zext_ln118_fu_797_p1;
reg   [63:0] zext_ln118_reg_963;
reg   [8:0] Input_local_1_addr_2_reg_968;
reg   [8:0] Input_local_2_addr_2_reg_974;
reg   [8:0] Input_local_3_addr_2_reg_980;
reg   [8:0] Input_local_4_addr_2_reg_986;
reg   [8:0] Input_local_5_addr_2_reg_992;
reg   [8:0] Input_local_6_addr_2_reg_998;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_block_state80;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state81;
reg   [8:0] Input_local_0_address0;
reg    Input_local_0_ce0;
reg    Input_local_0_we0;
reg   [7:0] Input_local_0_d0;
wire   [7:0] Input_local_0_q0;
reg   [8:0] Input_local_1_address0;
reg    Input_local_1_ce0;
reg    Input_local_1_we0;
reg   [7:0] Input_local_1_d0;
wire   [7:0] Input_local_1_q0;
wire   [8:0] Input_local_1_address1;
reg    Input_local_1_ce1;
wire   [7:0] Input_local_1_q1;
reg   [8:0] Input_local_2_address0;
reg    Input_local_2_ce0;
reg    Input_local_2_we0;
reg   [7:0] Input_local_2_d0;
wire   [7:0] Input_local_2_q0;
wire   [8:0] Input_local_2_address1;
reg    Input_local_2_ce1;
wire   [7:0] Input_local_2_q1;
reg   [8:0] Input_local_3_address0;
reg    Input_local_3_ce0;
reg    Input_local_3_we0;
reg   [7:0] Input_local_3_d0;
wire   [7:0] Input_local_3_q0;
wire   [8:0] Input_local_3_address1;
reg    Input_local_3_ce1;
wire   [7:0] Input_local_3_q1;
reg   [8:0] Input_local_4_address0;
reg    Input_local_4_ce0;
reg    Input_local_4_we0;
reg   [7:0] Input_local_4_d0;
wire   [7:0] Input_local_4_q0;
wire   [8:0] Input_local_4_address1;
reg    Input_local_4_ce1;
wire   [7:0] Input_local_4_q1;
reg   [8:0] Input_local_5_address0;
reg    Input_local_5_ce0;
reg    Input_local_5_we0;
reg   [7:0] Input_local_5_d0;
wire   [7:0] Input_local_5_q0;
wire   [8:0] Input_local_5_address1;
reg    Input_local_5_ce1;
wire   [7:0] Input_local_5_q1;
reg   [8:0] Input_local_6_address0;
reg    Input_local_6_ce0;
reg    Input_local_6_we0;
wire   [7:0] Input_local_6_q0;
wire   [8:0] Input_local_6_address1;
reg    Input_local_6_ce1;
wire   [7:0] Input_local_6_q1;
reg   [2:0] ap_phi_mux_j_phi_fu_428_p4;
reg   [8:0] Y_reg_446;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state4;
reg   [16:0] phi_mul_reg_458;
reg   [7:0] ap_phi_mux_phi_ln114_phi_fu_484_p4;
wire   [63:0] i_cast_i_i_fu_549_p1;
wire  signed [63:0] sext_ln104_fu_596_p1;
wire    ap_block_pp1_stage0_01001;
wire   [0:0] icmp_ln98_fu_515_p2;
wire   [2:0] add_ln97_1_fu_529_p2;
wire   [63:0] p_cast_i_i_fu_577_p1;
wire   [63:0] empty_49_fu_581_p2;
wire   [62:0] trunc_ln_fu_586_p4;
wire   [8:0] zext_ln107_fu_639_p1;
wire   [8:0] zext_ln112_1_fu_635_p1;
wire   [8:0] tmp_i_i_fu_647_p2;
wire   [14:0] p_shl3_i_i_fu_653_p3;
wire   [9:0] p_shl4_i_i_fu_665_p3;
wire   [15:0] p_shl3_cast_i_i_fu_661_p1;
wire   [15:0] p_shl4_cast_i_i_fu_673_p1;
wire   [8:0] zext_ln107_1_fu_643_p1;
wire   [8:0] zext_ln112_fu_631_p1;
wire   [12:0] p_shl_i_i_fu_692_p3;
wire   [13:0] p_shl_cast_i_i_fu_699_p1;
wire   [13:0] tmp2_cast125_i_i_fu_689_p1;
wire   [13:0] tmp3_i_i_fu_703_p2;
wire   [8:0] Input_local_6_load_cast_i_i_fu_717_p1;
wire   [8:0] Input_local_0_load_cast_i_i_fu_713_p1;
wire   [8:0] tmp41_i_i_fu_721_p2;
wire   [9:0] tmp5_i_i_fu_727_p3;
wire  signed [14:0] tmp3_i_i_cast_fu_709_p1;
wire   [14:0] zext_ln112_4_fu_735_p1;
wire   [14:0] add_ln112_1_fu_739_p2;
wire  signed [15:0] sext_ln112_fu_745_p1;
wire   [15:0] grp_fu_807_p3;
(* use_dsp48 = "no" *) wire   [15:0] Sum_fu_749_p2;
wire   [7:0] tmp_2_fu_754_p4;
wire   [7:0] grp_fu_807_p0;
wire   [7:0] grp_fu_807_p1;
wire   [15:0] grp_fu_807_p2;
reg    grp_fu_807_ce;
reg   [75:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [14:0] grp_fu_807_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 76'd1;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

Filter_HW_Filter_vertical_HW_Input_local_0 #(
    .DataWidth( 8 ),
    .AddressRange( 474 ),
    .AddressWidth( 9 ))
Input_local_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Input_local_0_address0),
    .ce0(Input_local_0_ce0),
    .we0(Input_local_0_we0),
    .d0(Input_local_0_d0),
    .q0(Input_local_0_q0)
);

Filter_HW_Filter_vertical_HW_Input_local_1 #(
    .DataWidth( 8 ),
    .AddressRange( 474 ),
    .AddressWidth( 9 ))
Input_local_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Input_local_1_address0),
    .ce0(Input_local_1_ce0),
    .we0(Input_local_1_we0),
    .d0(Input_local_1_d0),
    .q0(Input_local_1_q0),
    .address1(Input_local_1_address1),
    .ce1(Input_local_1_ce1),
    .q1(Input_local_1_q1)
);

Filter_HW_Filter_vertical_HW_Input_local_1 #(
    .DataWidth( 8 ),
    .AddressRange( 474 ),
    .AddressWidth( 9 ))
Input_local_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Input_local_2_address0),
    .ce0(Input_local_2_ce0),
    .we0(Input_local_2_we0),
    .d0(Input_local_2_d0),
    .q0(Input_local_2_q0),
    .address1(Input_local_2_address1),
    .ce1(Input_local_2_ce1),
    .q1(Input_local_2_q1)
);

Filter_HW_Filter_vertical_HW_Input_local_1 #(
    .DataWidth( 8 ),
    .AddressRange( 474 ),
    .AddressWidth( 9 ))
Input_local_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Input_local_3_address0),
    .ce0(Input_local_3_ce0),
    .we0(Input_local_3_we0),
    .d0(Input_local_3_d0),
    .q0(Input_local_3_q0),
    .address1(Input_local_3_address1),
    .ce1(Input_local_3_ce1),
    .q1(Input_local_3_q1)
);

Filter_HW_Filter_vertical_HW_Input_local_1 #(
    .DataWidth( 8 ),
    .AddressRange( 474 ),
    .AddressWidth( 9 ))
Input_local_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Input_local_4_address0),
    .ce0(Input_local_4_ce0),
    .we0(Input_local_4_we0),
    .d0(Input_local_4_d0),
    .q0(Input_local_4_q0),
    .address1(Input_local_4_address1),
    .ce1(Input_local_4_ce1),
    .q1(Input_local_4_q1)
);

Filter_HW_Filter_vertical_HW_Input_local_1 #(
    .DataWidth( 8 ),
    .AddressRange( 474 ),
    .AddressWidth( 9 ))
Input_local_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Input_local_5_address0),
    .ce0(Input_local_5_ce0),
    .we0(Input_local_5_we0),
    .d0(Input_local_5_d0),
    .q0(Input_local_5_q0),
    .address1(Input_local_5_address1),
    .ce1(Input_local_5_ce1),
    .q1(Input_local_5_q1)
);

Filter_HW_Filter_vertical_HW_Input_local_1 #(
    .DataWidth( 8 ),
    .AddressRange( 474 ),
    .AddressWidth( 9 ))
Input_local_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Input_local_6_address0),
    .ce0(Input_local_6_ce0),
    .we0(Input_local_6_we0),
    .d0(tempStream_dout),
    .q0(Input_local_6_q0),
    .address1(Input_local_6_address1),
    .ce1(Input_local_6_ce1),
    .q1(Input_local_6_q1)
);

Filter_HW_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_807_p0),
    .din1(grp_fu_807_p1),
    .din2(grp_fu_807_p2),
    .ce(grp_fu_807_ce),
    .dout(grp_fu_807_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln103_reg_850 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state80) & ((icmp_ln117_reg_950 == 1'd1) | (icmp_ln103_reg_850 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == Output_r_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == Output_r_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (m_axi_gmem_AWREADY == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end else if (((1'b1 == ap_CS_fsm_state6) & (m_axi_gmem_AWREADY == 1'b1))) begin
            ap_enable_reg_pp1_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state81) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((~((icmp_ln103_reg_850 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (icmp_ln117_reg_950 == 1'd0) & (1'b1 == ap_CS_fsm_state80) & (icmp_ln103_reg_850 == 1'd0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state81) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state81);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((~((icmp_ln103_reg_850 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (icmp_ln117_reg_950 == 1'd0) & (1'b1 == ap_CS_fsm_state80) & (icmp_ln103_reg_850 == 1'd0))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_612_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        X_reg_469 <= add_ln104_fu_606_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (m_axi_gmem_AWREADY == 1'b1))) begin
        X_reg_469 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Y_reg_446 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        Y_reg_446 <= add_ln103_reg_854;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln103_reg_850 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (icmp_ln117_reg_950 == 1'd0) & (1'b1 == ap_CS_fsm_state80) & (icmp_ln103_reg_850 == 1'd0))) begin
        i_1_reg_492 <= 9'd0;
    end else if (((icmp_ln118_fu_791_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_1_reg_492 <= add_ln118_fu_785_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_509_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_435 <= add_ln98_fu_543_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == Output_r_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_435 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_509_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_413 <= add_ln97_fu_503_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == Output_r_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_413 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_reg_826 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_424 <= select_ln97_reg_835;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == Output_r_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_424 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_reg_870_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        phi_ln114_reg_480 <= select_ln114_reg_945;
    end else if (((1'b1 == ap_CS_fsm_state6) & (m_axi_gmem_AWREADY == 1'b1))) begin
        phi_ln114_reg_480 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        phi_mul_reg_458 <= 17'd0;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        phi_mul_reg_458 <= add_ln103_1_reg_845;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_fu_791_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        Input_local_1_addr_2_reg_968 <= zext_ln118_fu_797_p1;
        Input_local_2_addr_2_reg_974 <= zext_ln118_fu_797_p1;
        Input_local_3_addr_2_reg_980 <= zext_ln118_fu_797_p1;
        Input_local_4_addr_2_reg_986 <= zext_ln118_fu_797_p1;
        Input_local_5_addr_2_reg_992 <= zext_ln118_fu_797_p1;
        Input_local_6_addr_2_reg_998 <= zext_ln118_fu_797_p1;
        zext_ln118_reg_963[8 : 0] <= zext_ln118_fu_797_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        Output_read_reg_816 <= Output_r_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln103_1_reg_845 <= add_ln103_1_fu_559_p2;
        add_ln103_reg_854 <= add_ln103_fu_571_p2;
        icmp_ln103_reg_850 <= icmp_ln103_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        gmem_addr_reg_859 <= sext_ln104_fu_596_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln104_reg_870 <= icmp_ln104_fu_612_p2;
        icmp_ln104_reg_870_pp1_iter1_reg <= icmp_ln104_reg_870;
        trunc_ln104_reg_884_pp1_iter1_reg <= trunc_ln104_reg_884;
        zext_ln104_reg_874_pp1_iter1_reg[8 : 0] <= zext_ln104_reg_874[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln104_reg_870_pp1_iter2_reg <= icmp_ln104_reg_870_pp1_iter1_reg;
        icmp_ln104_reg_870_pp1_iter3_reg <= icmp_ln104_reg_870_pp1_iter2_reg;
        icmp_ln104_reg_870_pp1_iter4_reg <= icmp_ln104_reg_870_pp1_iter3_reg;
        trunc_ln104_reg_884_pp1_iter2_reg <= trunc_ln104_reg_884_pp1_iter1_reg;
        trunc_ln104_reg_884_pp1_iter3_reg <= trunc_ln104_reg_884_pp1_iter2_reg;
        trunc_ln104_reg_884_pp1_iter4_reg <= trunc_ln104_reg_884_pp1_iter3_reg;
        zext_ln104_reg_874_pp1_iter2_reg[8 : 0] <= zext_ln104_reg_874_pp1_iter1_reg[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        icmp_ln117_reg_950 <= icmp_ln117_fu_779_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln118_reg_959 <= icmp_ln118_fu_791_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln97_reg_826 <= icmp_ln97_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_reg_870_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        or_ln_reg_940 <= or_ln_fu_764_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln104_reg_870_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln114_reg_945 <= select_ln114_fu_772_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_509_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln87_reg_830 <= select_ln87_fu_521_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_509_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln97_reg_835 <= select_ln97_fu_535_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_reg_870_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp2_i_i_reg_934 <= tmp2_i_i_fu_683_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_612_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        trunc_ln104_reg_884 <= trunc_ln104_fu_623_p1;
        zext_ln104_reg_874[8 : 0] <= zext_ln104_fu_618_p1[8 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_0_address0 = zext_ln118_reg_963;
    end else if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        Input_local_0_address0 = zext_ln104_reg_874_pp1_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_0_address0 = i_cast_i_i_fu_549_p1;
    end else begin
        Input_local_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        Input_local_0_ce0 = 1'b1;
    end else begin
        Input_local_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_0_d0 = Input_local_1_q1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_0_d0 = tempStream_dout;
    end else begin
        Input_local_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((select_ln97_reg_835 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln118_reg_959 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        Input_local_0_we0 = 1'b1;
    end else begin
        Input_local_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_1_address0 = Input_local_1_addr_2_reg_968;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        Input_local_1_address0 = zext_ln104_reg_874_pp1_iter1_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_1_address0 = i_cast_i_i_fu_549_p1;
    end else begin
        Input_local_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        Input_local_1_ce0 = 1'b1;
    end else begin
        Input_local_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        Input_local_1_ce1 = 1'b1;
    end else begin
        Input_local_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_1_d0 = Input_local_2_q1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_1_d0 = tempStream_dout;
    end else begin
        Input_local_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((select_ln97_reg_835 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln118_reg_959 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        Input_local_1_we0 = 1'b1;
    end else begin
        Input_local_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_2_address0 = Input_local_2_addr_2_reg_974;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        Input_local_2_address0 = zext_ln104_reg_874_pp1_iter1_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_2_address0 = i_cast_i_i_fu_549_p1;
    end else begin
        Input_local_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        Input_local_2_ce0 = 1'b1;
    end else begin
        Input_local_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        Input_local_2_ce1 = 1'b1;
    end else begin
        Input_local_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_2_d0 = Input_local_3_q1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_2_d0 = tempStream_dout;
    end else begin
        Input_local_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((select_ln97_reg_835 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln118_reg_959 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        Input_local_2_we0 = 1'b1;
    end else begin
        Input_local_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_3_address0 = Input_local_3_addr_2_reg_980;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        Input_local_3_address0 = zext_ln104_fu_618_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_3_address0 = i_cast_i_i_fu_549_p1;
    end else begin
        Input_local_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        Input_local_3_ce0 = 1'b1;
    end else begin
        Input_local_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        Input_local_3_ce1 = 1'b1;
    end else begin
        Input_local_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_3_d0 = Input_local_4_q1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_3_d0 = tempStream_dout;
    end else begin
        Input_local_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((select_ln97_reg_835 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln118_reg_959 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        Input_local_3_we0 = 1'b1;
    end else begin
        Input_local_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_4_address0 = Input_local_4_addr_2_reg_986;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        Input_local_4_address0 = zext_ln104_reg_874_pp1_iter1_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_4_address0 = i_cast_i_i_fu_549_p1;
    end else begin
        Input_local_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        Input_local_4_ce0 = 1'b1;
    end else begin
        Input_local_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        Input_local_4_ce1 = 1'b1;
    end else begin
        Input_local_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_4_d0 = Input_local_5_q1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_4_d0 = tempStream_dout;
    end else begin
        Input_local_4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((select_ln97_reg_835 == 3'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln118_reg_959 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        Input_local_4_we0 = 1'b1;
    end else begin
        Input_local_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_5_address0 = Input_local_5_addr_2_reg_992;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        Input_local_5_address0 = zext_ln104_reg_874_pp1_iter1_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_5_address0 = i_cast_i_i_fu_549_p1;
    end else begin
        Input_local_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        Input_local_5_ce0 = 1'b1;
    end else begin
        Input_local_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        Input_local_5_ce1 = 1'b1;
    end else begin
        Input_local_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_5_d0 = Input_local_6_q1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_5_d0 = tempStream_dout;
    end else begin
        Input_local_5_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((select_ln97_reg_835 == 3'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln118_reg_959 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        Input_local_5_we0 = 1'b1;
    end else begin
        Input_local_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        Input_local_6_address0 = Input_local_6_addr_2_reg_998;
    end else if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        Input_local_6_address0 = zext_ln104_reg_874_pp1_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Input_local_6_address0 = i_cast_i_i_fu_549_p1;
    end else begin
        Input_local_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        Input_local_6_ce0 = 1'b1;
    end else begin
        Input_local_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        Input_local_6_ce1 = 1'b1;
    end else begin
        Input_local_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln118_reg_959 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & ((select_ln97_reg_835 == 3'd6) | (select_ln97_reg_835 == 3'd7))))) begin
        Input_local_6_we0 = 1'b1;
    end else begin
        Input_local_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_r_blk_n = Output_r_empty_n;
    end else begin
        Output_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == Output_r_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_r_read = 1'b1;
    end else begin
        Output_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln97_fu_509_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln104_fu_612_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln118_fu_791_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state81 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state81 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln103_reg_850 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state80) & ((icmp_ln117_reg_950 == 1'd1) | (icmp_ln103_reg_850 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln97_reg_826 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_428_p4 = select_ln97_reg_835;
    end else begin
        ap_phi_mux_j_phi_fu_428_p4 = j_reg_424;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_870_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        ap_phi_mux_phi_ln114_phi_fu_484_p4 = select_ln114_reg_945;
    end else begin
        ap_phi_mux_phi_ln114_phi_fu_484_p4 = phi_ln114_reg_480;
    end
end

always @ (*) begin
    if ((~((icmp_ln103_reg_850 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state80) & ((icmp_ln117_reg_950 == 1'd1) | (icmp_ln103_reg_850 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) & (icmp_ln103_reg_850 == 1'd0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln104_reg_884_pp1_iter4_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        grp_fu_807_ce = 1'b1;
    end else begin
        grp_fu_807_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (m_axi_gmem_AWREADY == 1'b1))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln103_reg_850 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state80) & (icmp_ln103_reg_850 == 1'd0))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln104_reg_884_pp1_iter4_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln118_reg_959 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0)) | ((icmp_ln97_reg_826 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        tempStream_blk_n = tempStream_empty_n;
    end else begin
        tempStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln118_reg_959 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln97_reg_826 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tempStream_read = 1'b1;
    end else begin
        tempStream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == Output_r_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln97_fu_509_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln97_fu_509_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln103_fu_565_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (m_axi_gmem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln104_fu_612_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln104_fu_612_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if ((~((icmp_ln103_reg_850 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state80) & ((icmp_ln117_reg_950 == 1'd1) | (icmp_ln103_reg_850 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln103_reg_850 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (icmp_ln117_reg_950 == 1'd0) & (1'b1 == ap_CS_fsm_state80) & (icmp_ln103_reg_850 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((icmp_ln118_fu_791_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((icmp_ln118_fu_791_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_local_0_load_cast_i_i_fu_713_p1 = Input_local_0_q0;

assign Input_local_1_address1 = zext_ln118_fu_797_p1;

assign Input_local_2_address1 = zext_ln118_fu_797_p1;

assign Input_local_3_address1 = zext_ln118_fu_797_p1;

assign Input_local_4_address1 = zext_ln118_fu_797_p1;

assign Input_local_5_address1 = zext_ln118_fu_797_p1;

assign Input_local_6_address1 = zext_ln118_fu_797_p1;

assign Input_local_6_load_cast_i_i_fu_717_p1 = Input_local_6_q0;

assign Sum_fu_749_p2 = ($signed(sext_ln112_fu_745_p1) + $signed(grp_fu_807_p3));

assign add_ln103_1_fu_559_p2 = (phi_mul_reg_458 + 17'd474);

assign add_ln103_fu_571_p2 = (Y_reg_446 + 9'd1);

assign add_ln104_fu_606_p2 = (X_reg_469 + 9'd1);

assign add_ln112_1_fu_739_p2 = ($signed(tmp3_i_i_cast_fu_709_p1) + $signed(zext_ln112_4_fu_735_p1));

assign add_ln118_fu_785_p2 = (i_1_reg_492 + 9'd1);

assign add_ln97_1_fu_529_p2 = (ap_phi_mux_j_phi_fu_428_p4 + 3'd1);

assign add_ln97_fu_503_p2 = (indvar_flatten_reg_413 + 12'd1);

assign add_ln98_fu_543_p2 = (select_ln87_fu_521_p3 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd75];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln97_reg_826 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tempStream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln97_reg_826 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tempStream_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp1_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp1_iter5 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((icmp_ln118_reg_959 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (tempStream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((icmp_ln118_reg_959 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (tempStream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == Output_r_empty_n));
end

assign ap_block_state10_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((trunc_ln104_reg_884_pp1_iter4_reg == 1'd1) & (m_axi_gmem_WREADY == 1'b0));
end

assign ap_block_state12_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln97_reg_826 == 1'd0) & (tempStream_empty_n == 1'b0));
end

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state80 = ((icmp_ln103_reg_850 == 1'd0) & (m_axi_gmem_BVALID == 1'b0));
end

assign ap_block_state81_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state82_pp2_stage0_iter1 = ((icmp_ln118_reg_959 == 1'd0) & (tempStream_empty_n == 1'b0));
end

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign empty_49_fu_581_p2 = (Output_read_reg_816 + p_cast_i_i_fu_577_p1);

assign grp_fu_807_p0 = grp_fu_807_p00;

assign grp_fu_807_p00 = Input_local_3_q0;

assign grp_fu_807_p1 = 15'd98;

assign grp_fu_807_p2 = (p_shl3_cast_i_i_fu_661_p1 - p_shl4_cast_i_i_fu_673_p1);

assign i_cast_i_i_fu_549_p1 = select_ln87_reg_830;

assign icmp_ln103_fu_565_p2 = ((Y_reg_446 == 9'd264) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_612_p2 = ((X_reg_469 == 9'd474) ? 1'b1 : 1'b0);

assign icmp_ln117_fu_779_p2 = ((Y_reg_446 == 9'd263) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_791_p2 = ((i_1_reg_492 == 9'd474) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_509_p2 = ((indvar_flatten_reg_413 == 12'd3318) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_515_p2 = ((i_reg_435 == 9'd474) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = gmem_addr_reg_859;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd237;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = or_ln_reg_940;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 2'd3;

assign m_axi_gmem_WUSER = 1'd0;

assign or_ln_fu_764_p3 = {{tmp_2_fu_754_p4}, {ap_phi_mux_phi_ln114_phi_fu_484_p4}};

assign p_cast_i_i_fu_577_p1 = phi_mul_reg_458;

assign p_shl3_cast_i_i_fu_661_p1 = p_shl3_i_i_fu_653_p3;

assign p_shl3_i_i_fu_653_p3 = {{tmp_i_i_fu_647_p2}, {6'd0}};

assign p_shl4_cast_i_i_fu_673_p1 = p_shl4_i_i_fu_665_p3;

assign p_shl4_i_i_fu_665_p3 = {{tmp_i_i_fu_647_p2}, {1'd0}};

assign p_shl_cast_i_i_fu_699_p1 = p_shl_i_i_fu_692_p3;

assign p_shl_i_i_fu_692_p3 = {{tmp2_i_i_reg_934}, {4'd0}};

assign select_ln114_fu_772_p3 = ((trunc_ln104_reg_884_pp1_iter3_reg[0:0] == 1'b1) ? 8'd0 : tmp_2_fu_754_p4);

assign select_ln87_fu_521_p3 = ((icmp_ln98_fu_515_p2[0:0] == 1'b1) ? 9'd0 : i_reg_435);

assign select_ln97_fu_535_p3 = ((icmp_ln98_fu_515_p2[0:0] == 1'b1) ? add_ln97_1_fu_529_p2 : ap_phi_mux_j_phi_fu_428_p4);

assign sext_ln104_fu_596_p1 = $signed(trunc_ln_fu_586_p4);

assign sext_ln112_fu_745_p1 = $signed(add_ln112_1_fu_739_p2);

assign tmp2_cast125_i_i_fu_689_p1 = tmp2_i_i_reg_934;

assign tmp2_i_i_fu_683_p2 = (zext_ln107_1_fu_643_p1 + zext_ln112_fu_631_p1);

assign tmp3_i_i_cast_fu_709_p1 = $signed(tmp3_i_i_fu_703_p2);

assign tmp3_i_i_fu_703_p2 = (p_shl_cast_i_i_fu_699_p1 - tmp2_cast125_i_i_fu_689_p1);

assign tmp41_i_i_fu_721_p2 = (Input_local_6_load_cast_i_i_fu_717_p1 + Input_local_0_load_cast_i_i_fu_713_p1);

assign tmp5_i_i_fu_727_p3 = {{tmp41_i_i_fu_721_p2}, {1'd0}};

assign tmp_2_fu_754_p4 = {{Sum_fu_749_p2[15:8]}};

assign tmp_i_i_fu_647_p2 = (zext_ln107_fu_639_p1 + zext_ln112_1_fu_635_p1);

assign trunc_ln104_fu_623_p1 = X_reg_469[0:0];

assign trunc_ln_fu_586_p4 = {{empty_49_fu_581_p2[63:1]}};

assign zext_ln104_fu_618_p1 = X_reg_469;

assign zext_ln107_1_fu_643_p1 = Input_local_5_q0;

assign zext_ln107_fu_639_p1 = Input_local_4_q0;

assign zext_ln112_1_fu_635_p1 = Input_local_2_q0;

assign zext_ln112_4_fu_735_p1 = tmp5_i_i_fu_727_p3;

assign zext_ln112_fu_631_p1 = Input_local_1_q0;

assign zext_ln118_fu_797_p1 = i_1_reg_492;

always @ (posedge ap_clk) begin
    zext_ln104_reg_874[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln104_reg_874_pp1_iter1_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln104_reg_874_pp1_iter2_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln118_reg_963[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //Filter_HW_Filter_vertical_HW

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Filter_HW_Filter_horizontal_HW3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_aximm1_AWVALID,
        m_axi_aximm1_AWREADY,
        m_axi_aximm1_AWADDR,
        m_axi_aximm1_AWID,
        m_axi_aximm1_AWLEN,
        m_axi_aximm1_AWSIZE,
        m_axi_aximm1_AWBURST,
        m_axi_aximm1_AWLOCK,
        m_axi_aximm1_AWCACHE,
        m_axi_aximm1_AWPROT,
        m_axi_aximm1_AWQOS,
        m_axi_aximm1_AWREGION,
        m_axi_aximm1_AWUSER,
        m_axi_aximm1_WVALID,
        m_axi_aximm1_WREADY,
        m_axi_aximm1_WDATA,
        m_axi_aximm1_WSTRB,
        m_axi_aximm1_WLAST,
        m_axi_aximm1_WID,
        m_axi_aximm1_WUSER,
        m_axi_aximm1_ARVALID,
        m_axi_aximm1_ARREADY,
        m_axi_aximm1_ARADDR,
        m_axi_aximm1_ARID,
        m_axi_aximm1_ARLEN,
        m_axi_aximm1_ARSIZE,
        m_axi_aximm1_ARBURST,
        m_axi_aximm1_ARLOCK,
        m_axi_aximm1_ARCACHE,
        m_axi_aximm1_ARPROT,
        m_axi_aximm1_ARQOS,
        m_axi_aximm1_ARREGION,
        m_axi_aximm1_ARUSER,
        m_axi_aximm1_RVALID,
        m_axi_aximm1_RREADY,
        m_axi_aximm1_RDATA,
        m_axi_aximm1_RLAST,
        m_axi_aximm1_RID,
        m_axi_aximm1_RUSER,
        m_axi_aximm1_RRESP,
        m_axi_aximm1_BVALID,
        m_axi_aximm1_BREADY,
        m_axi_aximm1_BRESP,
        m_axi_aximm1_BID,
        m_axi_aximm1_BUSER,
        Input_r,
        Output_r,
        Output_out_din,
        Output_out_full_n,
        Output_out_write,
        tempStream_din,
        tempStream_full_n,
        tempStream_write
);

parameter    ap_ST_fsm_state1 = 146'd1;
parameter    ap_ST_fsm_state2 = 146'd2;
parameter    ap_ST_fsm_state3 = 146'd4;
parameter    ap_ST_fsm_state4 = 146'd8;
parameter    ap_ST_fsm_state5 = 146'd16;
parameter    ap_ST_fsm_state6 = 146'd32;
parameter    ap_ST_fsm_state7 = 146'd64;
parameter    ap_ST_fsm_state8 = 146'd128;
parameter    ap_ST_fsm_state9 = 146'd256;
parameter    ap_ST_fsm_state10 = 146'd512;
parameter    ap_ST_fsm_state11 = 146'd1024;
parameter    ap_ST_fsm_state12 = 146'd2048;
parameter    ap_ST_fsm_state13 = 146'd4096;
parameter    ap_ST_fsm_state14 = 146'd8192;
parameter    ap_ST_fsm_state15 = 146'd16384;
parameter    ap_ST_fsm_state16 = 146'd32768;
parameter    ap_ST_fsm_state17 = 146'd65536;
parameter    ap_ST_fsm_state18 = 146'd131072;
parameter    ap_ST_fsm_state19 = 146'd262144;
parameter    ap_ST_fsm_state20 = 146'd524288;
parameter    ap_ST_fsm_state21 = 146'd1048576;
parameter    ap_ST_fsm_state22 = 146'd2097152;
parameter    ap_ST_fsm_state23 = 146'd4194304;
parameter    ap_ST_fsm_state24 = 146'd8388608;
parameter    ap_ST_fsm_state25 = 146'd16777216;
parameter    ap_ST_fsm_state26 = 146'd33554432;
parameter    ap_ST_fsm_state27 = 146'd67108864;
parameter    ap_ST_fsm_state28 = 146'd134217728;
parameter    ap_ST_fsm_state29 = 146'd268435456;
parameter    ap_ST_fsm_state30 = 146'd536870912;
parameter    ap_ST_fsm_state31 = 146'd1073741824;
parameter    ap_ST_fsm_state32 = 146'd2147483648;
parameter    ap_ST_fsm_state33 = 146'd4294967296;
parameter    ap_ST_fsm_state34 = 146'd8589934592;
parameter    ap_ST_fsm_state35 = 146'd17179869184;
parameter    ap_ST_fsm_state36 = 146'd34359738368;
parameter    ap_ST_fsm_state37 = 146'd68719476736;
parameter    ap_ST_fsm_state38 = 146'd137438953472;
parameter    ap_ST_fsm_state39 = 146'd274877906944;
parameter    ap_ST_fsm_state40 = 146'd549755813888;
parameter    ap_ST_fsm_state41 = 146'd1099511627776;
parameter    ap_ST_fsm_state42 = 146'd2199023255552;
parameter    ap_ST_fsm_state43 = 146'd4398046511104;
parameter    ap_ST_fsm_state44 = 146'd8796093022208;
parameter    ap_ST_fsm_state45 = 146'd17592186044416;
parameter    ap_ST_fsm_state46 = 146'd35184372088832;
parameter    ap_ST_fsm_state47 = 146'd70368744177664;
parameter    ap_ST_fsm_state48 = 146'd140737488355328;
parameter    ap_ST_fsm_state49 = 146'd281474976710656;
parameter    ap_ST_fsm_state50 = 146'd562949953421312;
parameter    ap_ST_fsm_state51 = 146'd1125899906842624;
parameter    ap_ST_fsm_state52 = 146'd2251799813685248;
parameter    ap_ST_fsm_state53 = 146'd4503599627370496;
parameter    ap_ST_fsm_state54 = 146'd9007199254740992;
parameter    ap_ST_fsm_state55 = 146'd18014398509481984;
parameter    ap_ST_fsm_state56 = 146'd36028797018963968;
parameter    ap_ST_fsm_state57 = 146'd72057594037927936;
parameter    ap_ST_fsm_state58 = 146'd144115188075855872;
parameter    ap_ST_fsm_state59 = 146'd288230376151711744;
parameter    ap_ST_fsm_state60 = 146'd576460752303423488;
parameter    ap_ST_fsm_state61 = 146'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 146'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 146'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 146'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 146'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 146'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 146'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 146'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 146'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 146'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 146'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 146'd2361183241434822606848;
parameter    ap_ST_fsm_pp0_stage0 = 146'd4722366482869645213696;
parameter    ap_ST_fsm_state76 = 146'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 146'd18889465931478580854784;
parameter    ap_ST_fsm_state78 = 146'd37778931862957161709568;
parameter    ap_ST_fsm_state79 = 146'd75557863725914323419136;
parameter    ap_ST_fsm_state80 = 146'd151115727451828646838272;
parameter    ap_ST_fsm_state81 = 146'd302231454903657293676544;
parameter    ap_ST_fsm_state82 = 146'd604462909807314587353088;
parameter    ap_ST_fsm_state83 = 146'd1208925819614629174706176;
parameter    ap_ST_fsm_state84 = 146'd2417851639229258349412352;
parameter    ap_ST_fsm_state85 = 146'd4835703278458516698824704;
parameter    ap_ST_fsm_state86 = 146'd9671406556917033397649408;
parameter    ap_ST_fsm_state87 = 146'd19342813113834066795298816;
parameter    ap_ST_fsm_state88 = 146'd38685626227668133590597632;
parameter    ap_ST_fsm_state89 = 146'd77371252455336267181195264;
parameter    ap_ST_fsm_state90 = 146'd154742504910672534362390528;
parameter    ap_ST_fsm_state91 = 146'd309485009821345068724781056;
parameter    ap_ST_fsm_state92 = 146'd618970019642690137449562112;
parameter    ap_ST_fsm_state93 = 146'd1237940039285380274899124224;
parameter    ap_ST_fsm_state94 = 146'd2475880078570760549798248448;
parameter    ap_ST_fsm_state95 = 146'd4951760157141521099596496896;
parameter    ap_ST_fsm_state96 = 146'd9903520314283042199192993792;
parameter    ap_ST_fsm_state97 = 146'd19807040628566084398385987584;
parameter    ap_ST_fsm_state98 = 146'd39614081257132168796771975168;
parameter    ap_ST_fsm_state99 = 146'd79228162514264337593543950336;
parameter    ap_ST_fsm_state100 = 146'd158456325028528675187087900672;
parameter    ap_ST_fsm_state101 = 146'd316912650057057350374175801344;
parameter    ap_ST_fsm_state102 = 146'd633825300114114700748351602688;
parameter    ap_ST_fsm_state103 = 146'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state104 = 146'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state105 = 146'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state106 = 146'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state107 = 146'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state108 = 146'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state109 = 146'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state110 = 146'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state111 = 146'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state112 = 146'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state113 = 146'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state114 = 146'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state115 = 146'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state116 = 146'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state117 = 146'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state118 = 146'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state119 = 146'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state120 = 146'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state121 = 146'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state122 = 146'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state123 = 146'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state124 = 146'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state125 = 146'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state126 = 146'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state127 = 146'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state128 = 146'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state129 = 146'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state130 = 146'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state131 = 146'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state132 = 146'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state133 = 146'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state134 = 146'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state135 = 146'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state136 = 146'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state137 = 146'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state138 = 146'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state139 = 146'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state140 = 146'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state141 = 146'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state142 = 146'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state143 = 146'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state144 = 146'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state145 = 146'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state146 = 146'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_pp1_stage0 = 146'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state153 = 146'd44601490397061246283071436545296723011960832;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_aximm1_AWVALID;
input   m_axi_aximm1_AWREADY;
output  [63:0] m_axi_aximm1_AWADDR;
output  [0:0] m_axi_aximm1_AWID;
output  [31:0] m_axi_aximm1_AWLEN;
output  [2:0] m_axi_aximm1_AWSIZE;
output  [1:0] m_axi_aximm1_AWBURST;
output  [1:0] m_axi_aximm1_AWLOCK;
output  [3:0] m_axi_aximm1_AWCACHE;
output  [2:0] m_axi_aximm1_AWPROT;
output  [3:0] m_axi_aximm1_AWQOS;
output  [3:0] m_axi_aximm1_AWREGION;
output  [0:0] m_axi_aximm1_AWUSER;
output   m_axi_aximm1_WVALID;
input   m_axi_aximm1_WREADY;
output  [15:0] m_axi_aximm1_WDATA;
output  [1:0] m_axi_aximm1_WSTRB;
output   m_axi_aximm1_WLAST;
output  [0:0] m_axi_aximm1_WID;
output  [0:0] m_axi_aximm1_WUSER;
output   m_axi_aximm1_ARVALID;
input   m_axi_aximm1_ARREADY;
output  [63:0] m_axi_aximm1_ARADDR;
output  [0:0] m_axi_aximm1_ARID;
output  [31:0] m_axi_aximm1_ARLEN;
output  [2:0] m_axi_aximm1_ARSIZE;
output  [1:0] m_axi_aximm1_ARBURST;
output  [1:0] m_axi_aximm1_ARLOCK;
output  [3:0] m_axi_aximm1_ARCACHE;
output  [2:0] m_axi_aximm1_ARPROT;
output  [3:0] m_axi_aximm1_ARQOS;
output  [3:0] m_axi_aximm1_ARREGION;
output  [0:0] m_axi_aximm1_ARUSER;
input   m_axi_aximm1_RVALID;
output   m_axi_aximm1_RREADY;
input  [15:0] m_axi_aximm1_RDATA;
input   m_axi_aximm1_RLAST;
input  [0:0] m_axi_aximm1_RID;
input  [0:0] m_axi_aximm1_RUSER;
input  [1:0] m_axi_aximm1_RRESP;
input   m_axi_aximm1_BVALID;
output   m_axi_aximm1_BREADY;
input  [1:0] m_axi_aximm1_BRESP;
input  [0:0] m_axi_aximm1_BID;
input  [0:0] m_axi_aximm1_BUSER;
input  [63:0] Input_r;
input  [63:0] Output_r;
output  [63:0] Output_out_din;
input   Output_out_full_n;
output   Output_out_write;
output  [7:0] tempStream_din;
input   tempStream_full_n;
output   tempStream_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_aximm1_ARVALID;
reg[63:0] m_axi_aximm1_ARADDR;
reg[31:0] m_axi_aximm1_ARLEN;
reg m_axi_aximm1_RREADY;
reg Output_out_write;
reg tempStream_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [145:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    aximm1_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    aximm1_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln44_reg_970;
reg   [0:0] empty_59_reg_974;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln45_reg_1065;
reg   [0:0] trunc_ln45_reg_1069;
reg    Output_out_blk_n;
reg    tempStream_blk_n;
reg    ap_enable_reg_pp1_iter5;
reg   [0:0] icmp_ln45_reg_1065_pp1_iter4_reg;
reg   [2:0] indvar_i_i_i_reg_264;
reg   [2:0] i_reg_275;
reg   [7:0] Input_local_6_1_i_i_i_reg_286;
reg   [7:0] Input_local_5_1_i_i_i_reg_297;
reg   [7:0] Input_local_6_4_reg_308;
reg   [7:0] Input_local_6_6_reg_319;
reg   [7:0] Input_local_6_8_reg_330;
reg   [7:0] Input_local_6_11_reg_341;
reg   [7:0] shiftreg15_i_i_i_reg_352;
reg   [8:0] X_reg_372;
reg   [7:0] Input_local_6_reg_383;
reg   [7:0] Input_local_5_reg_395;
reg   [7:0] Input_local_4_reg_408;
reg   [7:0] Input_local_3_reg_421;
reg   [7:0] Input_local_2_reg_434;
reg   [7:0] Input_local_1_reg_447;
reg   [7:0] shiftreg_i_i_i_reg_460;
wire   [8:0] add_ln43_fu_480_p2;
reg   [8:0] add_ln43_reg_946;
wire    ap_CS_fsm_state2;
wire  signed [18:0] empty_55_fu_516_p2;
reg  signed [18:0] empty_55_reg_954;
wire   [0:0] icmp_ln43_fu_486_p2;
reg   [63:0] aximm1_addr_reg_959;
wire   [2:0] add_ln44_1_fu_551_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state73_pp0_stage0_iter0;
reg    ap_predicate_op282_read_state74;
reg    ap_block_state74_pp0_stage0_iter1;
wire    ap_block_state75_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln44_fu_557_p2;
reg   [0:0] icmp_ln44_reg_970_pp0_iter1_reg;
wire   [0:0] empty_59_fu_563_p1;
reg   [0:0] empty_59_reg_974_pp0_iter1_reg;
wire   [0:0] icmp_ln44_1_fu_567_p2;
reg   [0:0] icmp_ln44_1_reg_978;
reg   [0:0] icmp_ln44_1_reg_978_pp0_iter1_reg;
wire   [0:0] icmp_ln44_2_fu_573_p2;
reg   [0:0] icmp_ln44_2_reg_984;
reg   [0:0] icmp_ln44_2_reg_984_pp0_iter1_reg;
wire   [0:0] icmp_ln44_3_fu_579_p2;
reg   [0:0] icmp_ln44_3_reg_989;
reg   [0:0] icmp_ln44_3_reg_989_pp0_iter1_reg;
wire   [0:0] icmp_ln44_4_fu_585_p2;
reg   [0:0] icmp_ln44_4_reg_996;
reg   [0:0] icmp_ln44_4_reg_996_pp0_iter1_reg;
wire   [0:0] icmp_ln44_5_fu_591_p2;
reg   [0:0] icmp_ln44_5_reg_1002;
reg   [0:0] icmp_ln44_5_reg_1002_pp0_iter1_reg;
wire   [2:0] add_ln44_fu_597_p2;
reg   [15:0] aximm1_addr_read_reg_1014;
reg    ap_enable_reg_pp0_iter2;
wire   [7:0] Input_local_6_2_fu_643_p3;
wire   [7:0] Input_local_6_3_fu_658_p3;
wire   [7:0] Input_local_6_5_fu_681_p3;
wire   [7:0] Input_local_6_7_fu_696_p3;
wire   [7:0] Input_local_6_10_fu_711_p3;
wire   [7:0] Input_local_6_12_fu_718_p3;
reg   [63:0] aximm1_addr_1_reg_1054;
wire    ap_CS_fsm_state76;
wire   [8:0] add_ln45_fu_759_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state147_pp1_stage0_iter0;
reg    ap_predicate_op397_read_state148;
reg    ap_block_state148_pp1_stage0_iter1;
wire    ap_block_state149_pp1_stage0_iter2;
wire    ap_block_state150_pp1_stage0_iter3;
wire    ap_block_state151_pp1_stage0_iter4;
reg    ap_block_state152_pp1_stage0_iter5;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln45_fu_765_p2;
reg   [0:0] icmp_ln45_reg_1065_pp1_iter1_reg;
reg   [0:0] icmp_ln45_reg_1065_pp1_iter2_reg;
reg   [0:0] icmp_ln45_reg_1065_pp1_iter3_reg;
wire   [0:0] trunc_ln45_fu_771_p1;
reg   [0:0] trunc_ln45_reg_1069_pp1_iter1_reg;
reg   [15:0] aximm1_addr_1_read_reg_1073;
wire   [7:0] trunc_ln54_fu_780_p1;
reg   [7:0] trunc_ln54_reg_1078;
reg    ap_enable_reg_pp1_iter2;
wire   [8:0] tmp2_i_i_i_fu_840_p2;
reg   [8:0] tmp2_i_i_i_reg_1093;
reg   [8:0] tmp2_i_i_i_reg_1093_pp1_iter3_reg;
wire   [14:0] add_ln58_1_fu_878_p2;
reg   [14:0] add_ln58_1_reg_1099;
reg   [14:0] add_ln58_1_reg_1099_pp1_iter3_reg;
reg   [14:0] add_ln58_1_reg_1099_pp1_iter4_reg;
wire    ap_CS_fsm_state72;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
wire    ap_CS_fsm_state146;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_enable_reg_pp1_iter3;
reg    ap_condition_pp1_exit_iter2_state149;
reg    ap_enable_reg_pp1_iter4;
reg   [7:0] Input_local_6_0_i_i_i_reg_181;
wire    ap_CS_fsm_state153;
reg   [7:0] Input_local_5_0_i_i_i_reg_193;
reg   [7:0] Input_local_4_0_i_i_i_reg_205;
reg   [7:0] Input_local_3_0_i_i_i_reg_217;
reg   [7:0] Input_local_2_0_i_i_i_reg_229;
reg   [7:0] Input_local_1_0_i_i_i_reg_241;
reg   [8:0] Y_reg_253;
reg    ap_block_state1;
reg   [15:0] ap_phi_mux_empty_60_phi_fu_366_p4;
wire   [15:0] ap_phi_reg_pp0_iter2_empty_60_reg_363;
wire   [15:0] shiftreg15_cast_i_i_i_fu_603_p1;
reg   [7:0] ap_phi_mux_Input_local_6_phi_fu_387_p4;
reg   [7:0] ap_phi_mux_Input_local_5_phi_fu_399_p4;
reg   [7:0] ap_phi_mux_Input_local_4_phi_fu_412_p4;
reg   [7:0] ap_phi_mux_Input_local_3_phi_fu_425_p4;
reg   [7:0] ap_phi_mux_Input_local_2_phi_fu_438_p4;
reg   [7:0] ap_phi_mux_Input_local_1_phi_fu_451_p4;
reg   [15:0] ap_phi_mux_empty_65_phi_fu_474_p4;
wire   [15:0] ap_phi_reg_pp1_iter2_empty_65_reg_471;
wire   [15:0] zext_ln45_fu_775_p1;
wire  signed [63:0] sext_ln44_fu_541_p1;
wire  signed [63:0] sext_ln45_fu_749_p1;
reg    ap_block_pp1_stage0_01001;
wire   [17:0] p_shl_i_i_i_fu_492_p3;
wire   [13:0] p_shl6_i_i_i_fu_504_p3;
wire   [18:0] p_shl_cast_i_i_i_fu_500_p1;
wire   [18:0] p_shl6_cast_i_i_i_fu_512_p1;
wire  signed [63:0] p_cast_i_i_i_fu_522_p1;
wire   [63:0] empty_56_fu_526_p2;
wire   [62:0] trunc_ln_fu_531_p4;
wire   [7:0] Input_local_1_2_fu_608_p1;
wire   [0:0] or_ln44_fu_622_p2;
wire   [0:0] or_ln44_1_fu_626_p2;
wire   [0:0] or_ln44_2_fu_637_p2;
wire   [7:0] select_ln44_fu_630_p3;
wire   [7:0] select_ln44_2_fu_651_p3;
wire   [7:0] select_ln44_4_fu_666_p3;
wire   [7:0] select_ln44_5_fu_673_p3;
wire   [7:0] select_ln44_7_fu_689_p3;
wire   [7:0] Input_local_6_9_fu_704_p3;
wire   [18:0] empty_61_fu_725_p2;
wire  signed [63:0] p_cast98_i_i_i_fu_730_p1;
wire   [63:0] empty_62_fu_734_p2;
wire   [62:0] trunc_ln1_fu_739_p4;
wire   [8:0] trunc_ln54_cast_i_i_i_fu_818_p1;
wire   [8:0] Input_local_1_1_cast_i_i_i_fu_814_p1;
wire   [8:0] tmp10_i_i_i_fu_822_p2;
wire   [9:0] tmp1_i_i_i_fu_828_p3;
wire   [8:0] zext_ln58_1_fu_798_p1;
wire   [8:0] zext_ln48_fu_806_p1;
wire   [8:0] zext_ln58_fu_794_p1;
wire   [8:0] zext_ln48_1_fu_810_p1;
wire   [8:0] tmp4_i_i_i_fu_846_p2;
wire   [12:0] p_shl7_i_i_i_fu_856_p3;
wire   [13:0] p_shl7_cast_i_i_i_fu_864_p1;
wire   [13:0] tmp4_cast97_i_i_i_fu_852_p1;
wire   [13:0] tmp5_i_i_i_fu_868_p2;
wire  signed [14:0] sext_ln58_fu_874_p1;
wire   [14:0] tmp1_i_i_i_cast_fu_836_p1;
wire   [14:0] p_shl8_i_i_i_fu_884_p3;
wire   [9:0] p_shl9_i_i_i_fu_895_p3;
wire   [15:0] p_shl8_cast_i_i_i_fu_891_p1;
wire   [15:0] p_shl9_cast_i_i_i_fu_902_p1;
wire  signed [15:0] sext_ln58_1_fu_912_p1;
wire   [15:0] grp_fu_931_p3;
(* use_dsp48 = "no" *) wire   [15:0] Sum_fu_915_p2;
wire   [7:0] grp_fu_931_p0;
wire   [7:0] grp_fu_931_p1;
wire   [15:0] grp_fu_931_p2;
reg    grp_fu_931_ce;
reg   [145:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [14:0] grp_fu_931_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 146'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
end

Filter_HW_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_931_p0),
    .din1(grp_fu_931_p1),
    .din2(grp_fu_931_p2),
    .ce(grp_fu_931_ce),
    .dout(grp_fu_931_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln43_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state72)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state72)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state146)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter2_state149)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end else if ((1'b1 == ap_CS_fsm_state146)) begin
            ap_enable_reg_pp1_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        Input_local_1_reg_447 <= Input_local_6_11_reg_341;
    end else if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_local_1_reg_447 <= Input_local_2_reg_434;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        Input_local_2_reg_434 <= Input_local_6_8_reg_330;
    end else if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_local_2_reg_434 <= Input_local_3_reg_421;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        Input_local_3_reg_421 <= Input_local_6_6_reg_319;
    end else if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_local_3_reg_421 <= Input_local_4_reg_408;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        Input_local_4_reg_408 <= Input_local_6_4_reg_308;
    end else if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_local_4_reg_408 <= Input_local_5_reg_395;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln44_reg_970_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Input_local_5_1_i_i_i_reg_297 <= Input_local_6_3_fu_658_p3;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        Input_local_5_1_i_i_i_reg_297 <= Input_local_5_0_i_i_i_reg_193;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        Input_local_5_reg_395 <= Input_local_5_1_i_i_i_reg_297;
    end else if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_local_5_reg_395 <= Input_local_6_reg_383;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln44_reg_970_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Input_local_6_11_reg_341 <= Input_local_6_12_fu_718_p3;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        Input_local_6_11_reg_341 <= Input_local_1_0_i_i_i_reg_241;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln44_reg_970_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Input_local_6_1_i_i_i_reg_286 <= Input_local_6_2_fu_643_p3;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        Input_local_6_1_i_i_i_reg_286 <= Input_local_6_0_i_i_i_reg_181;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln44_reg_970_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Input_local_6_4_reg_308 <= Input_local_6_5_fu_681_p3;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        Input_local_6_4_reg_308 <= Input_local_4_0_i_i_i_reg_205;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln44_reg_970_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Input_local_6_6_reg_319 <= Input_local_6_7_fu_696_p3;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        Input_local_6_6_reg_319 <= Input_local_3_0_i_i_i_reg_217;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln44_reg_970_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Input_local_6_8_reg_330 <= Input_local_6_10_fu_711_p3;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        Input_local_6_8_reg_330 <= Input_local_2_0_i_i_i_reg_229;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        Input_local_6_reg_383 <= Input_local_6_1_i_i_i_reg_286;
    end else if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_local_6_reg_383 <= trunc_ln54_reg_1078;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        X_reg_372 <= 9'd0;
    end else if (((icmp_ln45_fu_765_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        X_reg_372 <= add_ln45_fu_759_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        Y_reg_253 <= add_ln43_reg_946;
    end else if ((~((1'b0 == Output_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_reg_253 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_557_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_275 <= add_ln44_fu_597_p2;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        i_reg_275 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_557_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_i_i_i_reg_264 <= add_ln44_1_fu_551_p2;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        indvar_i_i_i_reg_264 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln44_reg_970_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shiftreg15_i_i_i_reg_352 <= {{ap_phi_mux_empty_60_phi_fu_366_p4[15:8]}};
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        shiftreg15_i_i_i_reg_352 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        shiftreg_i_i_i_reg_460 <= 8'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        shiftreg_i_i_i_reg_460 <= {{ap_phi_mux_empty_65_phi_fu_474_p4[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        Input_local_1_0_i_i_i_reg_241 <= Input_local_1_reg_447;
        Input_local_2_0_i_i_i_reg_229 <= Input_local_2_reg_434;
        Input_local_3_0_i_i_i_reg_217 <= Input_local_3_reg_421;
        Input_local_4_0_i_i_i_reg_205 <= Input_local_4_reg_408;
        Input_local_5_0_i_i_i_reg_193 <= Input_local_5_reg_395;
        Input_local_6_0_i_i_i_reg_181 <= Input_local_6_reg_383;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln43_reg_946 <= add_ln43_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_1065_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln58_1_reg_1099 <= add_ln58_1_fu_878_p2;
        tmp2_i_i_i_reg_1093 <= tmp2_i_i_i_fu_840_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        add_ln58_1_reg_1099_pp1_iter3_reg <= add_ln58_1_reg_1099;
        add_ln58_1_reg_1099_pp1_iter4_reg <= add_ln58_1_reg_1099_pp1_iter3_reg;
        icmp_ln45_reg_1065_pp1_iter2_reg <= icmp_ln45_reg_1065_pp1_iter1_reg;
        icmp_ln45_reg_1065_pp1_iter3_reg <= icmp_ln45_reg_1065_pp1_iter2_reg;
        icmp_ln45_reg_1065_pp1_iter4_reg <= icmp_ln45_reg_1065_pp1_iter3_reg;
        tmp2_i_i_i_reg_1093_pp1_iter3_reg <= tmp2_i_i_i_reg_1093;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op397_read_state148 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        aximm1_addr_1_read_reg_1073 <= m_axi_aximm1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        aximm1_addr_1_reg_1054 <= sext_ln45_fu_749_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op282_read_state74 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        aximm1_addr_read_reg_1014 <= m_axi_aximm1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_486_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        aximm1_addr_reg_959 <= sext_ln44_fu_541_p1;
        empty_55_reg_954[18 : 5] <= empty_55_fu_516_p2[18 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_557_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_59_reg_974 <= empty_59_fu_563_p1;
        icmp_ln44_1_reg_978 <= icmp_ln44_1_fu_567_p2;
        icmp_ln44_2_reg_984 <= icmp_ln44_2_fu_573_p2;
        icmp_ln44_3_reg_989 <= icmp_ln44_3_fu_579_p2;
        icmp_ln44_4_reg_996 <= icmp_ln44_4_fu_585_p2;
        icmp_ln44_5_reg_1002 <= icmp_ln44_5_fu_591_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_59_reg_974_pp0_iter1_reg <= empty_59_reg_974;
        icmp_ln44_1_reg_978_pp0_iter1_reg <= icmp_ln44_1_reg_978;
        icmp_ln44_2_reg_984_pp0_iter1_reg <= icmp_ln44_2_reg_984;
        icmp_ln44_3_reg_989_pp0_iter1_reg <= icmp_ln44_3_reg_989;
        icmp_ln44_4_reg_996_pp0_iter1_reg <= icmp_ln44_4_reg_996;
        icmp_ln44_5_reg_1002_pp0_iter1_reg <= icmp_ln44_5_reg_1002;
        icmp_ln44_reg_970 <= icmp_ln44_fu_557_p2;
        icmp_ln44_reg_970_pp0_iter1_reg <= icmp_ln44_reg_970;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln45_reg_1065 <= icmp_ln45_fu_765_p2;
        icmp_ln45_reg_1065_pp1_iter1_reg <= icmp_ln45_reg_1065;
        trunc_ln45_reg_1069_pp1_iter1_reg <= trunc_ln45_reg_1069;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_765_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        trunc_ln45_reg_1069 <= trunc_ln45_fu_771_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        trunc_ln54_reg_1078 <= trunc_ln54_fu_780_p1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_out_blk_n = Output_out_full_n;
    end else begin
        Output_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_out_write = 1'b1;
    end else begin
        Output_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_557_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_condition_pp1_exit_iter2_state149 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter2_state149 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_765_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_Input_local_1_phi_fu_451_p4 = Input_local_2_reg_434;
    end else begin
        ap_phi_mux_Input_local_1_phi_fu_451_p4 = Input_local_1_reg_447;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_Input_local_2_phi_fu_438_p4 = Input_local_3_reg_421;
    end else begin
        ap_phi_mux_Input_local_2_phi_fu_438_p4 = Input_local_2_reg_434;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_Input_local_3_phi_fu_425_p4 = Input_local_4_reg_408;
    end else begin
        ap_phi_mux_Input_local_3_phi_fu_425_p4 = Input_local_3_reg_421;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_Input_local_4_phi_fu_412_p4 = Input_local_5_reg_395;
    end else begin
        ap_phi_mux_Input_local_4_phi_fu_412_p4 = Input_local_4_reg_408;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_Input_local_5_phi_fu_399_p4 = Input_local_6_reg_383;
    end else begin
        ap_phi_mux_Input_local_5_phi_fu_399_p4 = Input_local_5_reg_395;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln45_reg_1065_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_Input_local_6_phi_fu_387_p4 = trunc_ln54_reg_1078;
    end else begin
        ap_phi_mux_Input_local_6_phi_fu_387_p4 = Input_local_6_reg_383;
    end
end

always @ (*) begin
    if ((icmp_ln44_reg_970_pp0_iter1_reg == 1'd0)) begin
        if ((empty_59_reg_974_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_60_phi_fu_366_p4 = shiftreg15_cast_i_i_i_fu_603_p1;
        end else if ((empty_59_reg_974_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_60_phi_fu_366_p4 = aximm1_addr_read_reg_1014;
        end else begin
            ap_phi_mux_empty_60_phi_fu_366_p4 = ap_phi_reg_pp0_iter2_empty_60_reg_363;
        end
    end else begin
        ap_phi_mux_empty_60_phi_fu_366_p4 = ap_phi_reg_pp0_iter2_empty_60_reg_363;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1065_pp1_iter1_reg == 1'd0)) begin
        if ((trunc_ln45_reg_1069_pp1_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_65_phi_fu_474_p4 = zext_ln45_fu_775_p1;
        end else if ((trunc_ln45_reg_1069_pp1_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_65_phi_fu_474_p4 = aximm1_addr_1_read_reg_1073;
        end else begin
            ap_phi_mux_empty_65_phi_fu_474_p4 = ap_phi_reg_pp1_iter2_empty_65_reg_471;
        end
    end else begin
        ap_phi_mux_empty_65_phi_fu_474_p4 = ap_phi_reg_pp1_iter2_empty_65_reg_471;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state3))) begin
        aximm1_blk_n_AR = m_axi_aximm1_ARREADY;
    end else begin
        aximm1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((trunc_ln45_reg_1069 == 1'd0) & (icmp_ln45_reg_1065 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((empty_59_reg_974 == 1'd0) & (icmp_ln44_reg_970 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        aximm1_blk_n_R = m_axi_aximm1_RVALID;
    end else begin
        aximm1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_931_ce = 1'b1;
    end else begin
        grp_fu_931_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_aximm1_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state77)) begin
            m_axi_aximm1_ARADDR = aximm1_addr_1_reg_1054;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_aximm1_ARADDR = aximm1_addr_reg_959;
        end else begin
            m_axi_aximm1_ARADDR = 'bx;
        end
    end else begin
        m_axi_aximm1_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((m_axi_aximm1_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state77)) begin
            m_axi_aximm1_ARLEN = 32'd237;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_aximm1_ARLEN = 32'd3;
        end else begin
            m_axi_aximm1_ARLEN = 'bx;
        end
    end else begin
        m_axi_aximm1_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_aximm1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77)) | ((m_axi_aximm1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_aximm1_ARVALID = 1'b1;
    end else begin
        m_axi_aximm1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op397_read_state148 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_predicate_op282_read_state74 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axi_aximm1_RREADY = 1'b1;
    end else begin
        m_axi_aximm1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1065_pp1_iter4_reg == 1'd0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        tempStream_blk_n = tempStream_full_n;
    end else begin
        tempStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1065_pp1_iter4_reg == 1'd0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tempStream_write = 1'b1;
    end else begin
        tempStream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Output_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln43_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_aximm1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((m_axi_aximm1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state153;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_local_1_1_cast_i_i_i_fu_814_p1 = ap_phi_mux_Input_local_1_phi_fu_451_p4;

assign Input_local_1_2_fu_608_p1 = ap_phi_mux_empty_60_phi_fu_366_p4[7:0];

assign Input_local_6_10_fu_711_p3 = ((icmp_ln44_5_reg_1002_pp0_iter1_reg[0:0] == 1'b1) ? Input_local_6_8_reg_330 : Input_local_6_9_fu_704_p3);

assign Input_local_6_12_fu_718_p3 = ((icmp_ln44_5_reg_1002_pp0_iter1_reg[0:0] == 1'b1) ? Input_local_1_2_fu_608_p1 : Input_local_6_11_reg_341);

assign Input_local_6_2_fu_643_p3 = ((or_ln44_2_fu_637_p2[0:0] == 1'b1) ? Input_local_6_1_i_i_i_reg_286 : select_ln44_fu_630_p3);

assign Input_local_6_3_fu_658_p3 = ((or_ln44_2_fu_637_p2[0:0] == 1'b1) ? Input_local_5_1_i_i_i_reg_297 : select_ln44_2_fu_651_p3);

assign Input_local_6_5_fu_681_p3 = ((or_ln44_2_fu_637_p2[0:0] == 1'b1) ? select_ln44_5_fu_673_p3 : Input_local_6_4_reg_308);

assign Input_local_6_7_fu_696_p3 = ((or_ln44_fu_622_p2[0:0] == 1'b1) ? Input_local_6_6_reg_319 : select_ln44_7_fu_689_p3);

assign Input_local_6_9_fu_704_p3 = ((icmp_ln44_4_reg_996_pp0_iter1_reg[0:0] == 1'b1) ? Input_local_1_2_fu_608_p1 : Input_local_6_8_reg_330);

assign Output_out_din = Output_r;

assign Sum_fu_915_p2 = ($signed(sext_ln58_1_fu_912_p1) + $signed(grp_fu_931_p3));

assign add_ln43_fu_480_p2 = (Y_reg_253 + 9'd1);

assign add_ln44_1_fu_551_p2 = (indvar_i_i_i_reg_264 + 3'd1);

assign add_ln44_fu_597_p2 = (i_reg_275 + 3'd1);

assign add_ln45_fu_759_p2 = (X_reg_372 + 9'd1);

assign add_ln58_1_fu_878_p2 = ($signed(sext_ln58_fu_874_p1) + $signed(tmp1_i_i_i_cast_fu_836_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd74];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_predicate_op282_read_state74 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_aximm1_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_predicate_op282_read_state74 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_aximm1_RVALID == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_predicate_op397_read_state148 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_aximm1_RVALID == 1'b0)) | ((icmp_ln45_reg_1065_pp1_iter4_reg == 1'd0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (tempStream_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_predicate_op397_read_state148 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_aximm1_RVALID == 1'b0)) | ((icmp_ln45_reg_1065_pp1_iter4_reg == 1'd0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (tempStream_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_predicate_op397_read_state148 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_aximm1_RVALID == 1'b0)) | ((icmp_ln45_reg_1065_pp1_iter4_reg == 1'd0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (tempStream_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == Output_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state147_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state148_pp1_stage0_iter1 = ((ap_predicate_op397_read_state148 == 1'b1) & (m_axi_aximm1_RVALID == 1'b0));
end

assign ap_block_state149_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state150_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state151_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state152_pp1_stage0_iter5 = ((icmp_ln45_reg_1065_pp1_iter4_reg == 1'd0) & (tempStream_full_n == 1'b0));
end

assign ap_block_state73_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state74_pp0_stage0_iter1 = ((ap_predicate_op282_read_state74 == 1'b1) & (m_axi_aximm1_RVALID == 1'b0));
end

assign ap_block_state75_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_reg_pp0_iter2_empty_60_reg_363 = 'bx;

assign ap_phi_reg_pp1_iter2_empty_65_reg_471 = 'bx;

always @ (*) begin
    ap_predicate_op282_read_state74 = ((empty_59_reg_974 == 1'd0) & (icmp_ln44_reg_970 == 1'd0));
end

always @ (*) begin
    ap_predicate_op397_read_state148 = ((trunc_ln45_reg_1069 == 1'd0) & (icmp_ln45_reg_1065 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign empty_55_fu_516_p2 = (p_shl_cast_i_i_i_fu_500_p1 - p_shl6_cast_i_i_i_fu_512_p1);

assign empty_56_fu_526_p2 = ($signed(p_cast_i_i_i_fu_522_p1) + $signed(Input_r));

assign empty_59_fu_563_p1 = indvar_i_i_i_reg_264[0:0];

assign empty_61_fu_725_p2 = (empty_55_reg_954 | 19'd6);

assign empty_62_fu_734_p2 = ($signed(p_cast98_i_i_i_fu_730_p1) + $signed(Input_r));

assign grp_fu_931_p0 = grp_fu_931_p00;

assign grp_fu_931_p00 = ap_phi_mux_Input_local_4_phi_fu_412_p4;

assign grp_fu_931_p1 = 15'd98;

assign grp_fu_931_p2 = (p_shl8_cast_i_i_i_fu_891_p1 - p_shl9_cast_i_i_i_fu_902_p1);

assign icmp_ln43_fu_486_p2 = ((Y_reg_253 == 9'd270) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_567_p2 = ((i_reg_275 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln44_2_fu_573_p2 = ((i_reg_275 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln44_3_fu_579_p2 = ((i_reg_275 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln44_4_fu_585_p2 = ((i_reg_275 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln44_5_fu_591_p2 = ((i_reg_275 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_557_p2 = ((i_reg_275 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_765_p2 = ((X_reg_372 == 9'd474) ? 1'b1 : 1'b0);

assign m_axi_aximm1_ARBURST = 2'd0;

assign m_axi_aximm1_ARCACHE = 4'd0;

assign m_axi_aximm1_ARID = 1'd0;

assign m_axi_aximm1_ARLOCK = 2'd0;

assign m_axi_aximm1_ARPROT = 3'd0;

assign m_axi_aximm1_ARQOS = 4'd0;

assign m_axi_aximm1_ARREGION = 4'd0;

assign m_axi_aximm1_ARSIZE = 3'd0;

assign m_axi_aximm1_ARUSER = 1'd0;

assign m_axi_aximm1_AWADDR = 64'd0;

assign m_axi_aximm1_AWBURST = 2'd0;

assign m_axi_aximm1_AWCACHE = 4'd0;

assign m_axi_aximm1_AWID = 1'd0;

assign m_axi_aximm1_AWLEN = 32'd0;

assign m_axi_aximm1_AWLOCK = 2'd0;

assign m_axi_aximm1_AWPROT = 3'd0;

assign m_axi_aximm1_AWQOS = 4'd0;

assign m_axi_aximm1_AWREGION = 4'd0;

assign m_axi_aximm1_AWSIZE = 3'd0;

assign m_axi_aximm1_AWUSER = 1'd0;

assign m_axi_aximm1_AWVALID = 1'b0;

assign m_axi_aximm1_BREADY = 1'b0;

assign m_axi_aximm1_WDATA = 16'd0;

assign m_axi_aximm1_WID = 1'd0;

assign m_axi_aximm1_WLAST = 1'b0;

assign m_axi_aximm1_WSTRB = 2'd0;

assign m_axi_aximm1_WUSER = 1'd0;

assign m_axi_aximm1_WVALID = 1'b0;

assign or_ln44_1_fu_626_p2 = (icmp_ln44_3_reg_989_pp0_iter1_reg | icmp_ln44_2_reg_984_pp0_iter1_reg);

assign or_ln44_2_fu_637_p2 = (or_ln44_fu_622_p2 | or_ln44_1_fu_626_p2);

assign or_ln44_fu_622_p2 = (icmp_ln44_5_reg_1002_pp0_iter1_reg | icmp_ln44_4_reg_996_pp0_iter1_reg);

assign p_cast98_i_i_i_fu_730_p1 = $signed(empty_61_fu_725_p2);

assign p_cast_i_i_i_fu_522_p1 = empty_55_fu_516_p2;

assign p_shl6_cast_i_i_i_fu_512_p1 = p_shl6_i_i_i_fu_504_p3;

assign p_shl6_i_i_i_fu_504_p3 = {{Y_reg_253}, {5'd0}};

assign p_shl7_cast_i_i_i_fu_864_p1 = p_shl7_i_i_i_fu_856_p3;

assign p_shl7_i_i_i_fu_856_p3 = {{tmp4_i_i_i_fu_846_p2}, {4'd0}};

assign p_shl8_cast_i_i_i_fu_891_p1 = p_shl8_i_i_i_fu_884_p3;

assign p_shl8_i_i_i_fu_884_p3 = {{tmp2_i_i_i_reg_1093_pp1_iter3_reg}, {6'd0}};

assign p_shl9_cast_i_i_i_fu_902_p1 = p_shl9_i_i_i_fu_895_p3;

assign p_shl9_i_i_i_fu_895_p3 = {{tmp2_i_i_i_reg_1093_pp1_iter3_reg}, {1'd0}};

assign p_shl_cast_i_i_i_fu_500_p1 = p_shl_i_i_i_fu_492_p3;

assign p_shl_i_i_i_fu_492_p3 = {{Y_reg_253}, {9'd0}};

assign select_ln44_2_fu_651_p3 = ((icmp_ln44_1_reg_978_pp0_iter1_reg[0:0] == 1'b1) ? Input_local_1_2_fu_608_p1 : Input_local_5_1_i_i_i_reg_297);

assign select_ln44_4_fu_666_p3 = ((icmp_ln44_3_reg_989_pp0_iter1_reg[0:0] == 1'b1) ? Input_local_6_4_reg_308 : Input_local_1_2_fu_608_p1);

assign select_ln44_5_fu_673_p3 = ((or_ln44_fu_622_p2[0:0] == 1'b1) ? Input_local_6_4_reg_308 : select_ln44_4_fu_666_p3);

assign select_ln44_7_fu_689_p3 = ((icmp_ln44_3_reg_989_pp0_iter1_reg[0:0] == 1'b1) ? Input_local_1_2_fu_608_p1 : Input_local_6_6_reg_319);

assign select_ln44_fu_630_p3 = ((icmp_ln44_1_reg_978_pp0_iter1_reg[0:0] == 1'b1) ? Input_local_6_1_i_i_i_reg_286 : Input_local_1_2_fu_608_p1);

assign sext_ln44_fu_541_p1 = $signed(trunc_ln_fu_531_p4);

assign sext_ln45_fu_749_p1 = $signed(trunc_ln1_fu_739_p4);

assign sext_ln58_1_fu_912_p1 = $signed(add_ln58_1_reg_1099_pp1_iter4_reg);

assign sext_ln58_fu_874_p1 = $signed(tmp5_i_i_i_fu_868_p2);

assign shiftreg15_cast_i_i_i_fu_603_p1 = shiftreg15_i_i_i_reg_352;

assign start_out = real_start;

assign tempStream_din = {{Sum_fu_915_p2[15:8]}};

assign tmp10_i_i_i_fu_822_p2 = (trunc_ln54_cast_i_i_i_fu_818_p1 + Input_local_1_1_cast_i_i_i_fu_814_p1);

assign tmp1_i_i_i_cast_fu_836_p1 = tmp1_i_i_i_fu_828_p3;

assign tmp1_i_i_i_fu_828_p3 = {{tmp10_i_i_i_fu_822_p2}, {1'd0}};

assign tmp2_i_i_i_fu_840_p2 = (zext_ln58_1_fu_798_p1 + zext_ln48_fu_806_p1);

assign tmp4_cast97_i_i_i_fu_852_p1 = tmp4_i_i_i_fu_846_p2;

assign tmp4_i_i_i_fu_846_p2 = (zext_ln58_fu_794_p1 + zext_ln48_1_fu_810_p1);

assign tmp5_i_i_i_fu_868_p2 = (p_shl7_cast_i_i_i_fu_864_p1 - tmp4_cast97_i_i_i_fu_852_p1);

assign trunc_ln1_fu_739_p4 = {{empty_62_fu_734_p2[63:1]}};

assign trunc_ln45_fu_771_p1 = X_reg_372[0:0];

assign trunc_ln54_cast_i_i_i_fu_818_p1 = trunc_ln54_fu_780_p1;

assign trunc_ln54_fu_780_p1 = ap_phi_mux_empty_65_phi_fu_474_p4[7:0];

assign trunc_ln_fu_531_p4 = {{empty_56_fu_526_p2[63:1]}};

assign zext_ln45_fu_775_p1 = shiftreg_i_i_i_reg_460;

assign zext_ln48_1_fu_810_p1 = ap_phi_mux_Input_local_6_phi_fu_387_p4;

assign zext_ln48_fu_806_p1 = ap_phi_mux_Input_local_5_phi_fu_399_p4;

assign zext_ln58_1_fu_798_p1 = ap_phi_mux_Input_local_3_phi_fu_425_p4;

assign zext_ln58_fu_794_p1 = ap_phi_mux_Input_local_2_phi_fu_438_p4;

always @ (posedge ap_clk) begin
    empty_55_reg_954[4:0] <= 5'b00000;
end

endmodule //Filter_HW_Filter_horizontal_HW3

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter_HW_Filter_vertical_HW is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Output_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    Output_r_empty_n : IN STD_LOGIC;
    Output_r_read : OUT STD_LOGIC;
    tempStream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    tempStream_empty_n : IN STD_LOGIC;
    tempStream_read : OUT STD_LOGIC );
end;


architecture behav of Filter_HW_Filter_vertical_HW is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_ED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_CF6 : STD_LOGIC_VECTOR (11 downto 0) := "110011110110";
    constant ap_const_lv9_1DA : STD_LOGIC_VECTOR (8 downto 0) := "111011010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv17_1DA : STD_LOGIC_VECTOR (16 downto 0) := "00000000111011010";
    constant ap_const_lv9_108 : STD_LOGIC_VECTOR (8 downto 0) := "100001000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_107 : STD_LOGIC_VECTOR (8 downto 0) := "100000111";
    constant ap_const_lv15_62 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal trunc_ln104_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln104_reg_884_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal icmp_ln103_reg_850 : STD_LOGIC_VECTOR (0 downto 0);
    signal Output_r_blk_n : STD_LOGIC;
    signal tempStream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln97_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln118_reg_959 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_413 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_reg_424 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_435 : STD_LOGIC_VECTOR (8 downto 0);
    signal X_reg_469 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_ln114_reg_480 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_492 : STD_LOGIC_VECTOR (8 downto 0);
    signal Output_read_reg_816 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln97_fu_503_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln97_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln87_fu_521_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln87_reg_830 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln97_fu_535_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln97_reg_835 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln98_fu_543_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln103_1_fu_559_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln103_1_reg_845 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln103_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln103_fu_571_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln103_reg_854 : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_addr_reg_859 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln104_fu_606_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln104_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_870 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_870_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_870_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_870_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_870_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln104_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_874 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_874_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_874_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln104_fu_623_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln104_reg_884_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln104_reg_884_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln104_reg_884_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_i_i_fu_683_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_i_i_reg_934 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln_fu_764_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln_reg_940 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln114_fu_772_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln114_reg_945 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal icmp_ln117_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_950 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln118_fu_785_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state81_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state82_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln118_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln118_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_reg_963 : STD_LOGIC_VECTOR (63 downto 0);
    signal Input_local_1_addr_2_reg_968 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_2_addr_2_reg_974 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_3_addr_2_reg_980 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_4_addr_2_reg_986 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_5_addr_2_reg_992 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_6_addr_2_reg_998 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_state80 : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state81 : STD_LOGIC;
    signal Input_local_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_0_ce0 : STD_LOGIC;
    signal Input_local_0_we0 : STD_LOGIC;
    signal Input_local_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_1_ce0 : STD_LOGIC;
    signal Input_local_1_we0 : STD_LOGIC;
    signal Input_local_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_1_ce1 : STD_LOGIC;
    signal Input_local_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_2_ce0 : STD_LOGIC;
    signal Input_local_2_we0 : STD_LOGIC;
    signal Input_local_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_2_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_2_ce1 : STD_LOGIC;
    signal Input_local_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_3_ce0 : STD_LOGIC;
    signal Input_local_3_we0 : STD_LOGIC;
    signal Input_local_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_3_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_3_ce1 : STD_LOGIC;
    signal Input_local_3_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_4_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_4_ce0 : STD_LOGIC;
    signal Input_local_4_we0 : STD_LOGIC;
    signal Input_local_4_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_4_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_4_ce1 : STD_LOGIC;
    signal Input_local_4_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_5_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_5_ce0 : STD_LOGIC;
    signal Input_local_5_we0 : STD_LOGIC;
    signal Input_local_5_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_5_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_5_ce1 : STD_LOGIC;
    signal Input_local_5_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_6_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_6_ce0 : STD_LOGIC;
    signal Input_local_6_we0 : STD_LOGIC;
    signal Input_local_6_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_local_6_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_6_ce1 : STD_LOGIC;
    signal Input_local_6_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_j_phi_fu_428_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal Y_reg_446 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal phi_mul_reg_458 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_phi_mux_phi_ln114_phi_fu_484_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast_i_i_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln104_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal icmp_ln98_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln97_1_fu_529_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast_i_i_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_49_fu_581_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_586_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln107_fu_639_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln112_1_fu_635_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_fu_647_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_i_i_fu_653_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl4_i_i_fu_665_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_i_i_fu_661_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl4_cast_i_i_fu_673_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln107_1_fu_643_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln112_fu_631_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_i_i_fu_692_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_i_i_fu_699_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp2_cast125_i_i_fu_689_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_i_i_fu_703_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal Input_local_6_load_cast_i_i_fu_717_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal Input_local_0_load_cast_i_i_fu_713_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp41_i_i_fu_721_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_i_i_fu_727_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_i_i_cast_fu_709_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln112_4_fu_735_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln112_1_fu_739_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln112_fu_745_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_807_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal Sum_fu_749_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of Sum_fu_749_p2 : signal is "no";
    signal tmp_2_fu_754_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_807_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_807_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_807_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_807_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_807_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Filter_HW_mac_muladd_8ns_8ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Filter_HW_Filter_vertical_HW_Input_local_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Filter_HW_Filter_vertical_HW_Input_local_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    Input_local_0_U : component Filter_HW_Filter_vertical_HW_Input_local_0
    generic map (
        DataWidth => 8,
        AddressRange => 474,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Input_local_0_address0,
        ce0 => Input_local_0_ce0,
        we0 => Input_local_0_we0,
        d0 => Input_local_0_d0,
        q0 => Input_local_0_q0);

    Input_local_1_U : component Filter_HW_Filter_vertical_HW_Input_local_1
    generic map (
        DataWidth => 8,
        AddressRange => 474,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Input_local_1_address0,
        ce0 => Input_local_1_ce0,
        we0 => Input_local_1_we0,
        d0 => Input_local_1_d0,
        q0 => Input_local_1_q0,
        address1 => Input_local_1_address1,
        ce1 => Input_local_1_ce1,
        q1 => Input_local_1_q1);

    Input_local_2_U : component Filter_HW_Filter_vertical_HW_Input_local_1
    generic map (
        DataWidth => 8,
        AddressRange => 474,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Input_local_2_address0,
        ce0 => Input_local_2_ce0,
        we0 => Input_local_2_we0,
        d0 => Input_local_2_d0,
        q0 => Input_local_2_q0,
        address1 => Input_local_2_address1,
        ce1 => Input_local_2_ce1,
        q1 => Input_local_2_q1);

    Input_local_3_U : component Filter_HW_Filter_vertical_HW_Input_local_1
    generic map (
        DataWidth => 8,
        AddressRange => 474,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Input_local_3_address0,
        ce0 => Input_local_3_ce0,
        we0 => Input_local_3_we0,
        d0 => Input_local_3_d0,
        q0 => Input_local_3_q0,
        address1 => Input_local_3_address1,
        ce1 => Input_local_3_ce1,
        q1 => Input_local_3_q1);

    Input_local_4_U : component Filter_HW_Filter_vertical_HW_Input_local_1
    generic map (
        DataWidth => 8,
        AddressRange => 474,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Input_local_4_address0,
        ce0 => Input_local_4_ce0,
        we0 => Input_local_4_we0,
        d0 => Input_local_4_d0,
        q0 => Input_local_4_q0,
        address1 => Input_local_4_address1,
        ce1 => Input_local_4_ce1,
        q1 => Input_local_4_q1);

    Input_local_5_U : component Filter_HW_Filter_vertical_HW_Input_local_1
    generic map (
        DataWidth => 8,
        AddressRange => 474,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Input_local_5_address0,
        ce0 => Input_local_5_ce0,
        we0 => Input_local_5_we0,
        d0 => Input_local_5_d0,
        q0 => Input_local_5_q0,
        address1 => Input_local_5_address1,
        ce1 => Input_local_5_ce1,
        q1 => Input_local_5_q1);

    Input_local_6_U : component Filter_HW_Filter_vertical_HW_Input_local_1
    generic map (
        DataWidth => 8,
        AddressRange => 474,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Input_local_6_address0,
        ce0 => Input_local_6_ce0,
        we0 => Input_local_6_we0,
        d0 => tempStream_dout,
        q0 => Input_local_6_q0,
        address1 => Input_local_6_address1,
        ce1 => Input_local_6_ce1,
        q1 => Input_local_6_q1);

    mac_muladd_8ns_8ns_16ns_16_4_1_U8 : component Filter_HW_mac_muladd_8ns_8ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_807_p0,
        din1 => grp_fu_807_p1,
        din2 => grp_fu_807_p2,
        ce => grp_fu_807_ce,
        dout => grp_fu_807_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln103_reg_850 = ap_const_lv1_0) and (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state80) and ((icmp_ln117_reg_950 = ap_const_lv1_1) or (icmp_ln103_reg_850 = ap_const_lv1_1)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = Output_r_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = Output_r_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (m_axi_gmem_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (m_axi_gmem_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state81) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((not(((icmp_ln103_reg_850 = ap_const_lv1_0) and (m_axi_gmem_BVALID = ap_const_logic_0))) and (icmp_ln117_reg_950 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80) and (icmp_ln103_reg_850 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state81) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state81);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((not(((icmp_ln103_reg_850 = ap_const_lv1_0) and (m_axi_gmem_BVALID = ap_const_logic_0))) and (icmp_ln117_reg_950 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80) and (icmp_ln103_reg_850 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    X_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_612_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                X_reg_469 <= add_ln104_fu_606_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (m_axi_gmem_AWREADY = ap_const_logic_1))) then 
                X_reg_469 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    Y_reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                Y_reg_446 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                Y_reg_446 <= add_ln103_reg_854;
            end if; 
        end if;
    end process;

    i_1_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln103_reg_850 = ap_const_lv1_0) and (m_axi_gmem_BVALID = ap_const_logic_0))) and (icmp_ln117_reg_950 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80) and (icmp_ln103_reg_850 = ap_const_lv1_0))) then 
                i_1_reg_492 <= ap_const_lv9_0;
            elsif (((icmp_ln118_fu_791_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_1_reg_492 <= add_ln118_fu_785_p2;
            end if; 
        end if;
    end process;

    i_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_509_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_435 <= add_ln98_fu_543_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = Output_r_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_435 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_509_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_413 <= add_ln97_fu_503_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = Output_r_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_413 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    j_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_reg_826 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_424 <= select_ln97_reg_835;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = Output_r_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_424 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_ln114_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_reg_870_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
                phi_ln114_reg_480 <= select_ln114_reg_945;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (m_axi_gmem_AWREADY = ap_const_logic_1))) then 
                phi_ln114_reg_480 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_mul_reg_458 <= ap_const_lv17_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                phi_mul_reg_458 <= add_ln103_1_reg_845;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_fu_791_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                Input_local_1_addr_2_reg_968 <= zext_ln118_fu_797_p1(9 - 1 downto 0);
                Input_local_2_addr_2_reg_974 <= zext_ln118_fu_797_p1(9 - 1 downto 0);
                Input_local_3_addr_2_reg_980 <= zext_ln118_fu_797_p1(9 - 1 downto 0);
                Input_local_4_addr_2_reg_986 <= zext_ln118_fu_797_p1(9 - 1 downto 0);
                Input_local_5_addr_2_reg_992 <= zext_ln118_fu_797_p1(9 - 1 downto 0);
                Input_local_6_addr_2_reg_998 <= zext_ln118_fu_797_p1(9 - 1 downto 0);
                    zext_ln118_reg_963(8 downto 0) <= zext_ln118_fu_797_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                Output_read_reg_816 <= Output_r_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln103_1_reg_845 <= add_ln103_1_fu_559_p2;
                add_ln103_reg_854 <= add_ln103_fu_571_p2;
                icmp_ln103_reg_850 <= icmp_ln103_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                gmem_addr_reg_859 <= sext_ln104_fu_596_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln104_reg_870 <= icmp_ln104_fu_612_p2;
                icmp_ln104_reg_870_pp1_iter1_reg <= icmp_ln104_reg_870;
                trunc_ln104_reg_884_pp1_iter1_reg <= trunc_ln104_reg_884;
                    zext_ln104_reg_874_pp1_iter1_reg(8 downto 0) <= zext_ln104_reg_874(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln104_reg_870_pp1_iter2_reg <= icmp_ln104_reg_870_pp1_iter1_reg;
                icmp_ln104_reg_870_pp1_iter3_reg <= icmp_ln104_reg_870_pp1_iter2_reg;
                icmp_ln104_reg_870_pp1_iter4_reg <= icmp_ln104_reg_870_pp1_iter3_reg;
                trunc_ln104_reg_884_pp1_iter2_reg <= trunc_ln104_reg_884_pp1_iter1_reg;
                trunc_ln104_reg_884_pp1_iter3_reg <= trunc_ln104_reg_884_pp1_iter2_reg;
                trunc_ln104_reg_884_pp1_iter4_reg <= trunc_ln104_reg_884_pp1_iter3_reg;
                    zext_ln104_reg_874_pp1_iter2_reg(8 downto 0) <= zext_ln104_reg_874_pp1_iter1_reg(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                icmp_ln117_reg_950 <= icmp_ln117_fu_779_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln118_reg_959 <= icmp_ln118_fu_791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln97_reg_826 <= icmp_ln97_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_reg_870_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                or_ln_reg_940 <= or_ln_fu_764_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln104_reg_870_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln114_reg_945 <= select_ln114_fu_772_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_509_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln87_reg_830 <= select_ln87_fu_521_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_509_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln97_reg_835 <= select_ln97_fu_535_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_reg_870_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp2_i_i_reg_934 <= tmp2_i_i_fu_683_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_612_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                trunc_ln104_reg_884 <= trunc_ln104_fu_623_p1;
                    zext_ln104_reg_874(8 downto 0) <= zext_ln104_fu_618_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln104_reg_874(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_874_pp1_iter1_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_874_pp1_iter2_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln118_reg_963(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_BVALID, Output_r_empty_n, ap_CS_fsm_state6, ap_enable_reg_pp1_iter5, ap_CS_fsm_state80, icmp_ln103_reg_850, ap_enable_reg_pp0_iter0, icmp_ln97_fu_509_p2, ap_CS_fsm_state5, icmp_ln103_fu_565_p2, ap_enable_reg_pp1_iter0, icmp_ln104_fu_612_p2, ap_enable_reg_pp1_iter4, icmp_ln117_reg_950, ap_enable_reg_pp2_iter0, icmp_ln118_fu_791_p2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp2_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = Output_r_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln97_fu_509_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln97_fu_509_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln103_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (m_axi_gmem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln104_fu_612_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln104_fu_612_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if ((not(((icmp_ln103_reg_850 = ap_const_lv1_0) and (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state80) and ((icmp_ln117_reg_950 = ap_const_lv1_1) or (icmp_ln103_reg_850 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln103_reg_850 = ap_const_lv1_0) and (m_axi_gmem_BVALID = ap_const_logic_0))) and (icmp_ln117_reg_950 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80) and (icmp_ln103_reg_850 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln118_fu_791_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln118_fu_791_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Input_local_0_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, zext_ln104_reg_874_pp1_iter2_reg, zext_ln118_reg_963, ap_enable_reg_pp1_iter3, i_cast_i_i_fu_549_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_0_address0 <= zext_ln118_reg_963(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            Input_local_0_address0 <= zext_ln104_reg_874_pp1_iter2_reg(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_0_address0 <= i_cast_i_i_fu_549_p1(9 - 1 downto 0);
        else 
            Input_local_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    Input_local_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if ((((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            Input_local_0_ce0 <= ap_const_logic_1;
        else 
            Input_local_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_0_d0_assign_proc : process(tempStream_dout, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, Input_local_1_q1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_0_d0 <= Input_local_1_q1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_0_d0 <= tempStream_dout;
        else 
            Input_local_0_d0 <= "XXXXXXXX";
        end if; 
    end process;

    Input_local_0_load_cast_i_i_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Input_local_0_q0),9));

    Input_local_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln118_reg_959, ap_block_pp0_stage0_11001, select_ln97_reg_835, ap_block_pp2_stage0_11001)
    begin
        if ((((select_ln97_reg_835 = ap_const_lv3_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln118_reg_959 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            Input_local_0_we0 <= ap_const_logic_1;
        else 
            Input_local_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_1_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, zext_ln104_reg_874_pp1_iter1_reg, Input_local_1_addr_2_reg_968, ap_enable_reg_pp1_iter2, i_cast_i_i_fu_549_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_1_address0 <= Input_local_1_addr_2_reg_968;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            Input_local_1_address0 <= zext_ln104_reg_874_pp1_iter1_reg(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_1_address0 <= i_cast_i_i_fu_549_p1(9 - 1 downto 0);
        else 
            Input_local_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    Input_local_1_address1 <= zext_ln118_fu_797_p1(9 - 1 downto 0);

    Input_local_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            Input_local_1_ce0 <= ap_const_logic_1;
        else 
            Input_local_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_1_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            Input_local_1_ce1 <= ap_const_logic_1;
        else 
            Input_local_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_1_d0_assign_proc : process(tempStream_dout, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, Input_local_2_q1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_1_d0 <= Input_local_2_q1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_1_d0 <= tempStream_dout;
        else 
            Input_local_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    Input_local_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln118_reg_959, ap_block_pp0_stage0_11001, select_ln97_reg_835, ap_block_pp2_stage0_11001)
    begin
        if ((((select_ln97_reg_835 = ap_const_lv3_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln118_reg_959 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            Input_local_1_we0 <= ap_const_logic_1;
        else 
            Input_local_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_2_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, zext_ln104_reg_874_pp1_iter1_reg, Input_local_2_addr_2_reg_974, ap_enable_reg_pp1_iter2, i_cast_i_i_fu_549_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_2_address0 <= Input_local_2_addr_2_reg_974;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            Input_local_2_address0 <= zext_ln104_reg_874_pp1_iter1_reg(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_2_address0 <= i_cast_i_i_fu_549_p1(9 - 1 downto 0);
        else 
            Input_local_2_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    Input_local_2_address1 <= zext_ln118_fu_797_p1(9 - 1 downto 0);

    Input_local_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            Input_local_2_ce0 <= ap_const_logic_1;
        else 
            Input_local_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_2_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            Input_local_2_ce1 <= ap_const_logic_1;
        else 
            Input_local_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_2_d0_assign_proc : process(tempStream_dout, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, Input_local_3_q1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_2_d0 <= Input_local_3_q1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_2_d0 <= tempStream_dout;
        else 
            Input_local_2_d0 <= "XXXXXXXX";
        end if; 
    end process;


    Input_local_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln118_reg_959, ap_block_pp0_stage0_11001, select_ln97_reg_835, ap_block_pp2_stage0_11001)
    begin
        if ((((select_ln97_reg_835 = ap_const_lv3_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln118_reg_959 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            Input_local_2_we0 <= ap_const_logic_1;
        else 
            Input_local_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_3_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln104_fu_618_p1, Input_local_3_addr_2_reg_980, i_cast_i_i_fu_549_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_3_address0 <= Input_local_3_addr_2_reg_980;
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            Input_local_3_address0 <= zext_ln104_fu_618_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_3_address0 <= i_cast_i_i_fu_549_p1(9 - 1 downto 0);
        else 
            Input_local_3_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    Input_local_3_address1 <= zext_ln118_fu_797_p1(9 - 1 downto 0);

    Input_local_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            Input_local_3_ce0 <= ap_const_logic_1;
        else 
            Input_local_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_3_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            Input_local_3_ce1 <= ap_const_logic_1;
        else 
            Input_local_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_3_d0_assign_proc : process(tempStream_dout, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, Input_local_4_q1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_3_d0 <= Input_local_4_q1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_3_d0 <= tempStream_dout;
        else 
            Input_local_3_d0 <= "XXXXXXXX";
        end if; 
    end process;


    Input_local_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln118_reg_959, ap_block_pp0_stage0_11001, select_ln97_reg_835, ap_block_pp2_stage0_11001)
    begin
        if ((((select_ln97_reg_835 = ap_const_lv3_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln118_reg_959 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            Input_local_3_we0 <= ap_const_logic_1;
        else 
            Input_local_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_4_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, zext_ln104_reg_874_pp1_iter1_reg, Input_local_4_addr_2_reg_986, ap_enable_reg_pp1_iter2, i_cast_i_i_fu_549_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_4_address0 <= Input_local_4_addr_2_reg_986;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            Input_local_4_address0 <= zext_ln104_reg_874_pp1_iter1_reg(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_4_address0 <= i_cast_i_i_fu_549_p1(9 - 1 downto 0);
        else 
            Input_local_4_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    Input_local_4_address1 <= zext_ln118_fu_797_p1(9 - 1 downto 0);

    Input_local_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            Input_local_4_ce0 <= ap_const_logic_1;
        else 
            Input_local_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_4_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            Input_local_4_ce1 <= ap_const_logic_1;
        else 
            Input_local_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_4_d0_assign_proc : process(tempStream_dout, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, Input_local_5_q1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_4_d0 <= Input_local_5_q1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_4_d0 <= tempStream_dout;
        else 
            Input_local_4_d0 <= "XXXXXXXX";
        end if; 
    end process;


    Input_local_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln118_reg_959, ap_block_pp0_stage0_11001, select_ln97_reg_835, ap_block_pp2_stage0_11001)
    begin
        if ((((select_ln97_reg_835 = ap_const_lv3_4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln118_reg_959 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            Input_local_4_we0 <= ap_const_logic_1;
        else 
            Input_local_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_5_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, zext_ln104_reg_874_pp1_iter1_reg, Input_local_5_addr_2_reg_992, ap_enable_reg_pp1_iter2, i_cast_i_i_fu_549_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_5_address0 <= Input_local_5_addr_2_reg_992;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            Input_local_5_address0 <= zext_ln104_reg_874_pp1_iter1_reg(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_5_address0 <= i_cast_i_i_fu_549_p1(9 - 1 downto 0);
        else 
            Input_local_5_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    Input_local_5_address1 <= zext_ln118_fu_797_p1(9 - 1 downto 0);

    Input_local_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            Input_local_5_ce0 <= ap_const_logic_1;
        else 
            Input_local_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_5_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            Input_local_5_ce1 <= ap_const_logic_1;
        else 
            Input_local_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_5_d0_assign_proc : process(tempStream_dout, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, Input_local_6_q1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_5_d0 <= Input_local_6_q1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_5_d0 <= tempStream_dout;
        else 
            Input_local_5_d0 <= "XXXXXXXX";
        end if; 
    end process;


    Input_local_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln118_reg_959, ap_block_pp0_stage0_11001, select_ln97_reg_835, ap_block_pp2_stage0_11001)
    begin
        if ((((select_ln97_reg_835 = ap_const_lv3_5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln118_reg_959 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            Input_local_5_we0 <= ap_const_logic_1;
        else 
            Input_local_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_6_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, zext_ln104_reg_874_pp1_iter2_reg, Input_local_6_addr_2_reg_998, ap_enable_reg_pp1_iter3, i_cast_i_i_fu_549_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            Input_local_6_address0 <= Input_local_6_addr_2_reg_998;
        elsif (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            Input_local_6_address0 <= zext_ln104_reg_874_pp1_iter2_reg(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Input_local_6_address0 <= i_cast_i_i_fu_549_p1(9 - 1 downto 0);
        else 
            Input_local_6_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    Input_local_6_address1 <= zext_ln118_fu_797_p1(9 - 1 downto 0);

    Input_local_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if ((((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            Input_local_6_ce0 <= ap_const_logic_1;
        else 
            Input_local_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_local_6_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            Input_local_6_ce1 <= ap_const_logic_1;
        else 
            Input_local_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Input_local_6_load_cast_i_i_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Input_local_6_q0),9));

    Input_local_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln118_reg_959, ap_block_pp0_stage0_11001, select_ln97_reg_835, ap_block_pp2_stage0_11001)
    begin
        if ((((icmp_ln118_reg_959 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and ((select_ln97_reg_835 = ap_const_lv3_6) or (select_ln97_reg_835 = ap_const_lv3_7))))) then 
            Input_local_6_we0 <= ap_const_logic_1;
        else 
            Input_local_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Output_r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, Output_r_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Output_r_blk_n <= Output_r_empty_n;
        else 
            Output_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Output_r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, Output_r_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = Output_r_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Output_r_read <= ap_const_logic_1;
        else 
            Output_r_read <= ap_const_logic_0;
        end if; 
    end process;

    Sum_fu_749_p2 <= std_logic_vector(signed(sext_ln112_fu_745_p1) + signed(grp_fu_807_p3));
    add_ln103_1_fu_559_p2 <= std_logic_vector(unsigned(phi_mul_reg_458) + unsigned(ap_const_lv17_1DA));
    add_ln103_fu_571_p2 <= std_logic_vector(unsigned(Y_reg_446) + unsigned(ap_const_lv9_1));
    add_ln104_fu_606_p2 <= std_logic_vector(unsigned(X_reg_469) + unsigned(ap_const_lv9_1));
    add_ln112_1_fu_739_p2 <= std_logic_vector(signed(tmp3_i_i_cast_fu_709_p1) + signed(zext_ln112_4_fu_735_p1));
    add_ln118_fu_785_p2 <= std_logic_vector(unsigned(i_1_reg_492) + unsigned(ap_const_lv9_1));
    add_ln97_1_fu_529_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_428_p4) + unsigned(ap_const_lv3_1));
    add_ln97_fu_503_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_413) + unsigned(ap_const_lv12_1));
    add_ln98_fu_543_p2 <= std_logic_vector(unsigned(select_ln87_fu_521_p3) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(74);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state80 <= ap_CS_fsm(73);
    ap_CS_fsm_state83 <= ap_CS_fsm(75);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(tempStream_empty_n, ap_enable_reg_pp0_iter1, icmp_ln97_reg_826)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln97_reg_826 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tempStream_empty_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(tempStream_empty_n, ap_enable_reg_pp0_iter1, icmp_ln97_reg_826)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln97_reg_826 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tempStream_empty_n = ap_const_logic_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter5, ap_block_state12_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter5, ap_block_state12_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(tempStream_empty_n, ap_enable_reg_pp2_iter1, icmp_ln118_reg_959)
    begin
                ap_block_pp2_stage0_11001 <= ((icmp_ln118_reg_959 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (tempStream_empty_n = ap_const_logic_0));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(tempStream_empty_n, ap_enable_reg_pp2_iter1, icmp_ln118_reg_959)
    begin
                ap_block_pp2_stage0_subdone <= ((icmp_ln118_reg_959 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (tempStream_empty_n = ap_const_logic_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, Output_r_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = Output_r_empty_n));
    end process;

        ap_block_state10_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_io_assign_proc : process(m_axi_gmem_WREADY, trunc_ln104_reg_884_pp1_iter4_reg)
    begin
                ap_block_state12_io <= ((trunc_ln104_reg_884_pp1_iter4_reg = ap_const_lv1_1) and (m_axi_gmem_WREADY = ap_const_logic_0));
    end process;

        ap_block_state12_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(tempStream_empty_n, icmp_ln97_reg_826)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln97_reg_826 = ap_const_lv1_0) and (tempStream_empty_n = ap_const_logic_0));
    end process;

        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state80_assign_proc : process(m_axi_gmem_BVALID, icmp_ln103_reg_850)
    begin
                ap_block_state80 <= ((icmp_ln103_reg_850 = ap_const_lv1_0) and (m_axi_gmem_BVALID = ap_const_logic_0));
    end process;

        ap_block_state81_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state82_pp2_stage0_iter1_assign_proc : process(tempStream_empty_n, icmp_ln118_reg_959)
    begin
                ap_block_state82_pp2_stage0_iter1 <= ((icmp_ln118_reg_959 = ap_const_lv1_0) and (tempStream_empty_n = ap_const_logic_0));
    end process;

        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln97_fu_509_p2)
    begin
        if ((icmp_ln97_fu_509_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln104_fu_612_p2)
    begin
        if ((icmp_ln104_fu_612_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state81_assign_proc : process(icmp_ln118_fu_791_p2)
    begin
        if ((icmp_ln118_fu_791_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state81 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state81 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_gmem_BVALID, ap_CS_fsm_state80, icmp_ln103_reg_850, icmp_ln117_reg_950)
    begin
        if ((not(((icmp_ln103_reg_850 = ap_const_lv1_0) and (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state80) and ((icmp_ln117_reg_950 = ap_const_lv1_1) or (icmp_ln103_reg_850 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_428_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln97_reg_826, j_reg_424, select_ln97_reg_835)
    begin
        if (((icmp_ln97_reg_826 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_428_p4 <= select_ln97_reg_835;
        else 
            ap_phi_mux_j_phi_fu_428_p4 <= j_reg_424;
        end if; 
    end process;


    ap_phi_mux_phi_ln114_phi_fu_484_p4_assign_proc : process(ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, phi_ln114_reg_480, icmp_ln104_reg_870_pp1_iter4_reg, select_ln114_reg_945)
    begin
        if (((icmp_ln104_reg_870_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            ap_phi_mux_phi_ln114_phi_fu_484_p4 <= select_ln114_reg_945;
        else 
            ap_phi_mux_phi_ln114_phi_fu_484_p4 <= phi_ln114_reg_480;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state80, icmp_ln103_reg_850, icmp_ln117_reg_950)
    begin
        if ((not(((icmp_ln103_reg_850 = ap_const_lv1_0) and (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state80) and ((icmp_ln117_reg_950 = ap_const_lv1_1) or (icmp_ln103_reg_850 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_49_fu_581_p2 <= std_logic_vector(unsigned(Output_read_reg_816) + unsigned(p_cast_i_i_fu_577_p1));

    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state80, icmp_ln103_reg_850)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) and (icmp_ln103_reg_850 = ap_const_lv1_0))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, trunc_ln104_reg_884_pp1_iter4_reg)
    begin
        if (((trunc_ln104_reg_884_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_807_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            grp_fu_807_ce <= ap_const_logic_1;
        else 
            grp_fu_807_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_807_p0 <= grp_fu_807_p00(8 - 1 downto 0);
    grp_fu_807_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Input_local_3_q0),15));
    grp_fu_807_p1 <= ap_const_lv15_62(8 - 1 downto 0);
    grp_fu_807_p2 <= std_logic_vector(unsigned(p_shl3_cast_i_i_fu_661_p1) - unsigned(p_shl4_cast_i_i_fu_673_p1));
    i_cast_i_i_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln87_reg_830),64));
    icmp_ln103_fu_565_p2 <= "1" when (Y_reg_446 = ap_const_lv9_108) else "0";
    icmp_ln104_fu_612_p2 <= "1" when (X_reg_469 = ap_const_lv9_1DA) else "0";
    icmp_ln117_fu_779_p2 <= "1" when (Y_reg_446 = ap_const_lv9_107) else "0";
    icmp_ln118_fu_791_p2 <= "1" when (i_1_reg_492 = ap_const_lv9_1DA) else "0";
    icmp_ln97_fu_509_p2 <= "1" when (indvar_flatten_reg_413 = ap_const_lv12_CF6) else "0";
    icmp_ln98_fu_515_p2 <= "1" when (i_reg_435 = ap_const_lv9_1DA) else "0";
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= gmem_addr_reg_859;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_ED;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (m_axi_gmem_AWREADY = ap_const_logic_1))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state80, icmp_ln103_reg_850)
    begin
        if ((not(((icmp_ln103_reg_850 = ap_const_lv1_0) and (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state80) and (icmp_ln103_reg_850 = ap_const_lv1_0))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= or_ln_reg_940;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv2_3;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp1_iter5, trunc_ln104_reg_884_pp1_iter4_reg, ap_block_pp1_stage0_11001)
    begin
        if (((trunc_ln104_reg_884_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln_fu_764_p3 <= (tmp_2_fu_754_p4 & ap_phi_mux_phi_ln114_phi_fu_484_p4);
    p_cast_i_i_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_458),64));
    p_shl3_cast_i_i_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_i_i_fu_653_p3),16));
    p_shl3_i_i_fu_653_p3 <= (tmp_i_i_fu_647_p2 & ap_const_lv6_0);
    p_shl4_cast_i_i_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_i_i_fu_665_p3),16));
    p_shl4_i_i_fu_665_p3 <= (tmp_i_i_fu_647_p2 & ap_const_lv1_0);
    p_shl_cast_i_i_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_i_fu_692_p3),14));
    p_shl_i_i_fu_692_p3 <= (tmp2_i_i_reg_934 & ap_const_lv4_0);
    select_ln114_fu_772_p3 <= 
        ap_const_lv8_0 when (trunc_ln104_reg_884_pp1_iter3_reg(0) = '1') else 
        tmp_2_fu_754_p4;
    select_ln87_fu_521_p3 <= 
        ap_const_lv9_0 when (icmp_ln98_fu_515_p2(0) = '1') else 
        i_reg_435;
    select_ln97_fu_535_p3 <= 
        add_ln97_1_fu_529_p2 when (icmp_ln98_fu_515_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_428_p4;
        sext_ln104_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_586_p4),64));

        sext_ln112_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln112_1_fu_739_p2),16));


    tempStream_blk_n_assign_proc : process(tempStream_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln97_reg_826, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln118_reg_959)
    begin
        if ((((icmp_ln118_reg_959 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((icmp_ln97_reg_826 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            tempStream_blk_n <= tempStream_empty_n;
        else 
            tempStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tempStream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln97_reg_826, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln118_reg_959, ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((icmp_ln118_reg_959 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln97_reg_826 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            tempStream_read <= ap_const_logic_1;
        else 
            tempStream_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_cast125_i_i_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_i_i_reg_934),14));
    tmp2_i_i_fu_683_p2 <= std_logic_vector(unsigned(zext_ln107_1_fu_643_p1) + unsigned(zext_ln112_fu_631_p1));
        tmp3_i_i_cast_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_i_i_fu_703_p2),15));

    tmp3_i_i_fu_703_p2 <= std_logic_vector(unsigned(p_shl_cast_i_i_fu_699_p1) - unsigned(tmp2_cast125_i_i_fu_689_p1));
    tmp41_i_i_fu_721_p2 <= std_logic_vector(unsigned(Input_local_6_load_cast_i_i_fu_717_p1) + unsigned(Input_local_0_load_cast_i_i_fu_713_p1));
    tmp5_i_i_fu_727_p3 <= (tmp41_i_i_fu_721_p2 & ap_const_lv1_0);
    tmp_2_fu_754_p4 <= Sum_fu_749_p2(15 downto 8);
    tmp_i_i_fu_647_p2 <= std_logic_vector(unsigned(zext_ln107_fu_639_p1) + unsigned(zext_ln112_1_fu_635_p1));
    trunc_ln104_fu_623_p1 <= X_reg_469(1 - 1 downto 0);
    trunc_ln_fu_586_p4 <= empty_49_fu_581_p2(63 downto 1);
    zext_ln104_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_reg_469),64));
    zext_ln107_1_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Input_local_5_q0),9));
    zext_ln107_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Input_local_4_q0),9));
    zext_ln112_1_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Input_local_2_q0),9));
    zext_ln112_4_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_i_i_fu_727_p3),15));
    zext_ln112_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Input_local_1_q0),9));
    zext_ln118_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_492),64));
end behav;

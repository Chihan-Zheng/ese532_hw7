// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Filter_vertical_HW_Filter_vertical_HW,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.866910,HLS_SYN_LAT=20436985,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1581,HLS_SYN_LUT=2669,HLS_VERSION=2020_2}" *)

module Filter_vertical_HW (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 151'd1;
parameter    ap_ST_fsm_state2 = 151'd2;
parameter    ap_ST_fsm_pp0_stage0 = 151'd4;
parameter    ap_ST_fsm_state79 = 151'd8;
parameter    ap_ST_fsm_state80 = 151'd16;
parameter    ap_ST_fsm_pp1_stage0 = 151'd32;
parameter    ap_ST_fsm_state83 = 151'd64;
parameter    ap_ST_fsm_state84 = 151'd128;
parameter    ap_ST_fsm_state85 = 151'd256;
parameter    ap_ST_fsm_state86 = 151'd512;
parameter    ap_ST_fsm_state87 = 151'd1024;
parameter    ap_ST_fsm_state88 = 151'd2048;
parameter    ap_ST_fsm_state89 = 151'd4096;
parameter    ap_ST_fsm_state90 = 151'd8192;
parameter    ap_ST_fsm_state91 = 151'd16384;
parameter    ap_ST_fsm_state92 = 151'd32768;
parameter    ap_ST_fsm_state93 = 151'd65536;
parameter    ap_ST_fsm_state94 = 151'd131072;
parameter    ap_ST_fsm_state95 = 151'd262144;
parameter    ap_ST_fsm_state96 = 151'd524288;
parameter    ap_ST_fsm_state97 = 151'd1048576;
parameter    ap_ST_fsm_state98 = 151'd2097152;
parameter    ap_ST_fsm_state99 = 151'd4194304;
parameter    ap_ST_fsm_state100 = 151'd8388608;
parameter    ap_ST_fsm_state101 = 151'd16777216;
parameter    ap_ST_fsm_state102 = 151'd33554432;
parameter    ap_ST_fsm_state103 = 151'd67108864;
parameter    ap_ST_fsm_state104 = 151'd134217728;
parameter    ap_ST_fsm_state105 = 151'd268435456;
parameter    ap_ST_fsm_state106 = 151'd536870912;
parameter    ap_ST_fsm_state107 = 151'd1073741824;
parameter    ap_ST_fsm_state108 = 151'd2147483648;
parameter    ap_ST_fsm_state109 = 151'd4294967296;
parameter    ap_ST_fsm_state110 = 151'd8589934592;
parameter    ap_ST_fsm_state111 = 151'd17179869184;
parameter    ap_ST_fsm_state112 = 151'd34359738368;
parameter    ap_ST_fsm_state113 = 151'd68719476736;
parameter    ap_ST_fsm_state114 = 151'd137438953472;
parameter    ap_ST_fsm_state115 = 151'd274877906944;
parameter    ap_ST_fsm_state116 = 151'd549755813888;
parameter    ap_ST_fsm_state117 = 151'd1099511627776;
parameter    ap_ST_fsm_state118 = 151'd2199023255552;
parameter    ap_ST_fsm_state119 = 151'd4398046511104;
parameter    ap_ST_fsm_state120 = 151'd8796093022208;
parameter    ap_ST_fsm_state121 = 151'd17592186044416;
parameter    ap_ST_fsm_state122 = 151'd35184372088832;
parameter    ap_ST_fsm_state123 = 151'd70368744177664;
parameter    ap_ST_fsm_state124 = 151'd140737488355328;
parameter    ap_ST_fsm_state125 = 151'd281474976710656;
parameter    ap_ST_fsm_state126 = 151'd562949953421312;
parameter    ap_ST_fsm_state127 = 151'd1125899906842624;
parameter    ap_ST_fsm_state128 = 151'd2251799813685248;
parameter    ap_ST_fsm_state129 = 151'd4503599627370496;
parameter    ap_ST_fsm_state130 = 151'd9007199254740992;
parameter    ap_ST_fsm_state131 = 151'd18014398509481984;
parameter    ap_ST_fsm_state132 = 151'd36028797018963968;
parameter    ap_ST_fsm_state133 = 151'd72057594037927936;
parameter    ap_ST_fsm_state134 = 151'd144115188075855872;
parameter    ap_ST_fsm_state135 = 151'd288230376151711744;
parameter    ap_ST_fsm_state136 = 151'd576460752303423488;
parameter    ap_ST_fsm_state137 = 151'd1152921504606846976;
parameter    ap_ST_fsm_state138 = 151'd2305843009213693952;
parameter    ap_ST_fsm_state139 = 151'd4611686018427387904;
parameter    ap_ST_fsm_state140 = 151'd9223372036854775808;
parameter    ap_ST_fsm_state141 = 151'd18446744073709551616;
parameter    ap_ST_fsm_state142 = 151'd36893488147419103232;
parameter    ap_ST_fsm_state143 = 151'd73786976294838206464;
parameter    ap_ST_fsm_state144 = 151'd147573952589676412928;
parameter    ap_ST_fsm_state145 = 151'd295147905179352825856;
parameter    ap_ST_fsm_state146 = 151'd590295810358705651712;
parameter    ap_ST_fsm_state147 = 151'd1180591620717411303424;
parameter    ap_ST_fsm_state148 = 151'd2361183241434822606848;
parameter    ap_ST_fsm_state149 = 151'd4722366482869645213696;
parameter    ap_ST_fsm_state150 = 151'd9444732965739290427392;
parameter    ap_ST_fsm_state151 = 151'd18889465931478580854784;
parameter    ap_ST_fsm_state152 = 151'd37778931862957161709568;
parameter    ap_ST_fsm_state153 = 151'd75557863725914323419136;
parameter    ap_ST_fsm_state154 = 151'd151115727451828646838272;
parameter    ap_ST_fsm_state155 = 151'd302231454903657293676544;
parameter    ap_ST_fsm_pp2_stage0 = 151'd604462909807314587353088;
parameter    ap_ST_fsm_state161 = 151'd1208925819614629174706176;
parameter    ap_ST_fsm_state162 = 151'd2417851639229258349412352;
parameter    ap_ST_fsm_state163 = 151'd4835703278458516698824704;
parameter    ap_ST_fsm_state164 = 151'd9671406556917033397649408;
parameter    ap_ST_fsm_state165 = 151'd19342813113834066795298816;
parameter    ap_ST_fsm_state166 = 151'd38685626227668133590597632;
parameter    ap_ST_fsm_state167 = 151'd77371252455336267181195264;
parameter    ap_ST_fsm_state168 = 151'd154742504910672534362390528;
parameter    ap_ST_fsm_state169 = 151'd309485009821345068724781056;
parameter    ap_ST_fsm_state170 = 151'd618970019642690137449562112;
parameter    ap_ST_fsm_state171 = 151'd1237940039285380274899124224;
parameter    ap_ST_fsm_state172 = 151'd2475880078570760549798248448;
parameter    ap_ST_fsm_state173 = 151'd4951760157141521099596496896;
parameter    ap_ST_fsm_state174 = 151'd9903520314283042199192993792;
parameter    ap_ST_fsm_state175 = 151'd19807040628566084398385987584;
parameter    ap_ST_fsm_state176 = 151'd39614081257132168796771975168;
parameter    ap_ST_fsm_state177 = 151'd79228162514264337593543950336;
parameter    ap_ST_fsm_state178 = 151'd158456325028528675187087900672;
parameter    ap_ST_fsm_state179 = 151'd316912650057057350374175801344;
parameter    ap_ST_fsm_state180 = 151'd633825300114114700748351602688;
parameter    ap_ST_fsm_state181 = 151'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state182 = 151'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state183 = 151'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state184 = 151'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state185 = 151'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state186 = 151'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state187 = 151'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state188 = 151'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state189 = 151'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state190 = 151'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state191 = 151'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state192 = 151'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state193 = 151'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state194 = 151'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state195 = 151'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state196 = 151'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state197 = 151'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state198 = 151'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state199 = 151'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state200 = 151'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state201 = 151'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state202 = 151'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state203 = 151'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state204 = 151'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state205 = 151'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state206 = 151'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state207 = 151'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state208 = 151'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state209 = 151'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state210 = 151'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state211 = 151'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state212 = 151'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state213 = 151'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state214 = 151'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state215 = 151'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state216 = 151'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state217 = 151'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state218 = 151'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state219 = 151'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state220 = 151'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state221 = 151'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state222 = 151'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state223 = 151'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state224 = 151'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state225 = 151'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state226 = 151'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state227 = 151'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state228 = 151'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state229 = 151'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state230 = 151'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state231 = 151'd1427247692705959881058285969449495136382746624;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [150:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] Input_r;
wire   [63:0] Output_r;
wire   [2:0] p_Coefficients_local_address0;
reg    p_Coefficients_local_ce0;
wire   [6:0] p_Coefficients_local_q0;
reg    gmem_blk_n_AR;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln94_reg_547;
reg   [0:0] icmp_ln94_reg_547_pp0_iter3_reg;
reg    gmem_blk_n_R;
reg    ap_enable_reg_pp0_iter74;
reg   [0:0] icmp_ln94_reg_547_pp0_iter73_reg;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state154;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state162;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state163;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state231;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
wire   [7:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [2:0] i_reg_252;
reg   [2:0] i_reg_252_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_state7_io;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
wire    ap_block_state16_pp0_stage0_iter13;
wire    ap_block_state17_pp0_stage0_iter14;
wire    ap_block_state18_pp0_stage0_iter15;
wire    ap_block_state19_pp0_stage0_iter16;
wire    ap_block_state20_pp0_stage0_iter17;
wire    ap_block_state21_pp0_stage0_iter18;
wire    ap_block_state22_pp0_stage0_iter19;
wire    ap_block_state23_pp0_stage0_iter20;
wire    ap_block_state24_pp0_stage0_iter21;
wire    ap_block_state25_pp0_stage0_iter22;
wire    ap_block_state26_pp0_stage0_iter23;
wire    ap_block_state27_pp0_stage0_iter24;
wire    ap_block_state28_pp0_stage0_iter25;
wire    ap_block_state29_pp0_stage0_iter26;
wire    ap_block_state30_pp0_stage0_iter27;
wire    ap_block_state31_pp0_stage0_iter28;
wire    ap_block_state32_pp0_stage0_iter29;
wire    ap_block_state33_pp0_stage0_iter30;
wire    ap_block_state34_pp0_stage0_iter31;
wire    ap_block_state35_pp0_stage0_iter32;
wire    ap_block_state36_pp0_stage0_iter33;
wire    ap_block_state37_pp0_stage0_iter34;
wire    ap_block_state38_pp0_stage0_iter35;
wire    ap_block_state39_pp0_stage0_iter36;
wire    ap_block_state40_pp0_stage0_iter37;
wire    ap_block_state41_pp0_stage0_iter38;
wire    ap_block_state42_pp0_stage0_iter39;
wire    ap_block_state43_pp0_stage0_iter40;
wire    ap_block_state44_pp0_stage0_iter41;
wire    ap_block_state45_pp0_stage0_iter42;
wire    ap_block_state46_pp0_stage0_iter43;
wire    ap_block_state47_pp0_stage0_iter44;
wire    ap_block_state48_pp0_stage0_iter45;
wire    ap_block_state49_pp0_stage0_iter46;
wire    ap_block_state50_pp0_stage0_iter47;
wire    ap_block_state51_pp0_stage0_iter48;
wire    ap_block_state52_pp0_stage0_iter49;
wire    ap_block_state53_pp0_stage0_iter50;
wire    ap_block_state54_pp0_stage0_iter51;
wire    ap_block_state55_pp0_stage0_iter52;
wire    ap_block_state56_pp0_stage0_iter53;
wire    ap_block_state57_pp0_stage0_iter54;
wire    ap_block_state58_pp0_stage0_iter55;
wire    ap_block_state59_pp0_stage0_iter56;
wire    ap_block_state60_pp0_stage0_iter57;
wire    ap_block_state61_pp0_stage0_iter58;
wire    ap_block_state62_pp0_stage0_iter59;
wire    ap_block_state63_pp0_stage0_iter60;
wire    ap_block_state64_pp0_stage0_iter61;
wire    ap_block_state65_pp0_stage0_iter62;
wire    ap_block_state66_pp0_stage0_iter63;
wire    ap_block_state67_pp0_stage0_iter64;
wire    ap_block_state68_pp0_stage0_iter65;
wire    ap_block_state69_pp0_stage0_iter66;
wire    ap_block_state70_pp0_stage0_iter67;
wire    ap_block_state71_pp0_stage0_iter68;
wire    ap_block_state72_pp0_stage0_iter69;
wire    ap_block_state73_pp0_stage0_iter70;
wire    ap_block_state74_pp0_stage0_iter71;
wire    ap_block_state75_pp0_stage0_iter72;
wire    ap_block_state76_pp0_stage0_iter73;
reg    ap_block_state77_pp0_stage0_iter74;
wire    ap_block_state78_pp0_stage0_iter75;
reg    ap_block_pp0_stage0_11001;
reg   [2:0] i_reg_252_pp0_iter2_reg;
reg   [2:0] i_reg_252_pp0_iter3_reg;
reg   [2:0] i_reg_252_pp0_iter4_reg;
reg   [2:0] i_reg_252_pp0_iter5_reg;
reg   [2:0] i_reg_252_pp0_iter6_reg;
reg   [2:0] i_reg_252_pp0_iter7_reg;
reg   [2:0] i_reg_252_pp0_iter8_reg;
reg   [2:0] i_reg_252_pp0_iter9_reg;
reg   [2:0] i_reg_252_pp0_iter10_reg;
reg   [2:0] i_reg_252_pp0_iter11_reg;
reg   [2:0] i_reg_252_pp0_iter12_reg;
reg   [2:0] i_reg_252_pp0_iter13_reg;
reg   [2:0] i_reg_252_pp0_iter14_reg;
reg   [2:0] i_reg_252_pp0_iter15_reg;
reg   [2:0] i_reg_252_pp0_iter16_reg;
reg   [2:0] i_reg_252_pp0_iter17_reg;
reg   [2:0] i_reg_252_pp0_iter18_reg;
reg   [2:0] i_reg_252_pp0_iter19_reg;
reg   [2:0] i_reg_252_pp0_iter20_reg;
reg   [2:0] i_reg_252_pp0_iter21_reg;
reg   [2:0] i_reg_252_pp0_iter22_reg;
reg   [2:0] i_reg_252_pp0_iter23_reg;
reg   [2:0] i_reg_252_pp0_iter24_reg;
reg   [2:0] i_reg_252_pp0_iter25_reg;
reg   [2:0] i_reg_252_pp0_iter26_reg;
reg   [2:0] i_reg_252_pp0_iter27_reg;
reg   [2:0] i_reg_252_pp0_iter28_reg;
reg   [2:0] i_reg_252_pp0_iter29_reg;
reg   [2:0] i_reg_252_pp0_iter30_reg;
reg   [2:0] i_reg_252_pp0_iter31_reg;
reg   [2:0] i_reg_252_pp0_iter32_reg;
reg   [2:0] i_reg_252_pp0_iter33_reg;
reg   [2:0] i_reg_252_pp0_iter34_reg;
reg   [2:0] i_reg_252_pp0_iter35_reg;
reg   [2:0] i_reg_252_pp0_iter36_reg;
reg   [2:0] i_reg_252_pp0_iter37_reg;
reg   [2:0] i_reg_252_pp0_iter38_reg;
reg   [2:0] i_reg_252_pp0_iter39_reg;
reg   [2:0] i_reg_252_pp0_iter40_reg;
reg   [2:0] i_reg_252_pp0_iter41_reg;
reg   [2:0] i_reg_252_pp0_iter42_reg;
reg   [2:0] i_reg_252_pp0_iter43_reg;
reg   [2:0] i_reg_252_pp0_iter44_reg;
reg   [2:0] i_reg_252_pp0_iter45_reg;
reg   [2:0] i_reg_252_pp0_iter46_reg;
reg   [2:0] i_reg_252_pp0_iter47_reg;
reg   [2:0] i_reg_252_pp0_iter48_reg;
reg   [2:0] i_reg_252_pp0_iter49_reg;
reg   [2:0] i_reg_252_pp0_iter50_reg;
reg   [2:0] i_reg_252_pp0_iter51_reg;
reg   [2:0] i_reg_252_pp0_iter52_reg;
reg   [2:0] i_reg_252_pp0_iter53_reg;
reg   [2:0] i_reg_252_pp0_iter54_reg;
reg   [2:0] i_reg_252_pp0_iter55_reg;
reg   [2:0] i_reg_252_pp0_iter56_reg;
reg   [2:0] i_reg_252_pp0_iter57_reg;
reg   [2:0] i_reg_252_pp0_iter58_reg;
reg   [2:0] i_reg_252_pp0_iter59_reg;
reg   [2:0] i_reg_252_pp0_iter60_reg;
reg   [2:0] i_reg_252_pp0_iter61_reg;
reg   [2:0] i_reg_252_pp0_iter62_reg;
reg   [2:0] i_reg_252_pp0_iter63_reg;
reg   [2:0] i_reg_252_pp0_iter64_reg;
reg   [2:0] i_reg_252_pp0_iter65_reg;
reg   [2:0] i_reg_252_pp0_iter66_reg;
reg   [2:0] i_reg_252_pp0_iter67_reg;
reg   [2:0] i_reg_252_pp0_iter68_reg;
reg   [2:0] i_reg_252_pp0_iter69_reg;
reg   [2:0] i_reg_252_pp0_iter70_reg;
reg   [2:0] i_reg_252_pp0_iter71_reg;
reg   [2:0] i_reg_252_pp0_iter72_reg;
reg   [2:0] i_reg_252_pp0_iter73_reg;
reg   [2:0] i_reg_252_pp0_iter74_reg;
reg   [2:0] i_1_reg_287;
reg   [2:0] i_2_reg_299;
reg   [17:0] Sum_reg_310;
wire   [8:0] add_ln93_fu_322_p2;
reg   [8:0] add_ln93_reg_527;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln93_fu_328_p2;
wire   [63:0] zext_ln93_fu_334_p1;
reg   [63:0] zext_ln93_reg_536;
wire   [63:0] add_ln94_fu_338_p2;
reg   [63:0] add_ln94_reg_541;
wire   [0:0] icmp_ln94_fu_343_p2;
reg   [0:0] icmp_ln94_reg_547_pp0_iter1_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter2_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter4_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter5_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter6_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter7_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter8_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter9_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter10_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter11_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter12_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter13_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter14_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter15_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter16_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter17_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter18_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter19_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter20_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter21_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter22_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter23_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter24_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter25_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter26_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter27_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter28_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter29_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter30_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter31_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter32_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter33_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter34_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter35_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter36_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter37_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter38_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter39_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter40_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter41_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter42_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter43_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter44_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter45_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter46_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter47_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter48_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter49_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter50_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter51_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter52_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter53_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter54_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter55_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter56_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter57_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter58_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter59_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter60_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter61_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter62_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter63_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter64_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter65_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter66_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter67_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter68_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter69_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter70_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter71_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter72_reg;
reg   [0:0] icmp_ln94_reg_547_pp0_iter74_reg;
wire   [2:0] add_ln94_3_fu_349_p2;
reg   [2:0] add_ln94_3_reg_551;
reg    ap_enable_reg_pp0_iter0;
reg   [63:0] gmem_addr_reg_561;
reg   [7:0] gmem_addr_read_reg_567;
wire   [8:0] add_ln95_fu_378_p2;
reg   [8:0] add_ln95_reg_572;
wire    ap_CS_fsm_state80;
wire   [16:0] add_ln95_1_fu_384_p2;
reg   [16:0] add_ln95_1_reg_577;
wire   [0:0] icmp_ln95_fu_390_p2;
wire   [2:0] add_ln98_fu_396_p2;
reg   [2:0] add_ln98_reg_586;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state81_pp1_stage0_iter0;
wire    ap_block_state82_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln98_fu_402_p2;
reg   [0:0] icmp_ln98_reg_591;
reg   [63:0] gmem_addr_1_reg_600;
wire    ap_CS_fsm_state83;
reg   [7:0] gmem_addr_1_read_reg_606;
wire   [63:0] zext_ln99_fu_439_p1;
reg   [63:0] zext_ln99_reg_611;
wire    ap_CS_fsm_state155;
wire   [2:0] add_ln100_fu_443_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state156_pp2_stage0_iter0;
wire    ap_block_state157_pp2_stage0_iter1;
wire    ap_block_state158_pp2_stage0_iter2;
wire    ap_block_state159_pp2_stage0_iter3;
wire    ap_block_state160_pp2_stage0_iter4;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln100_fu_449_p2;
reg   [0:0] icmp_ln100_reg_621;
reg   [0:0] icmp_ln100_reg_621_pp2_iter1_reg;
reg   [0:0] icmp_ln100_reg_621_pp2_iter2_reg;
reg   [0:0] icmp_ln100_reg_621_pp2_iter3_reg;
wire   [17:0] grp_fu_504_p3;
reg    ap_enable_reg_pp2_iter4;
reg   [63:0] gmem_addr_2_reg_650;
wire    ap_CS_fsm_state161;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
reg    ap_enable_reg_pp0_iter71;
reg    ap_enable_reg_pp0_iter72;
reg    ap_enable_reg_pp0_iter73;
reg    ap_enable_reg_pp0_iter75;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state81;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state156;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg   [2:0] p_Input_local_address0;
reg    p_Input_local_ce0;
reg    p_Input_local_we0;
reg   [7:0] p_Input_local_d0;
wire   [7:0] p_Input_local_q0;
reg   [2:0] p_Input_local_address1;
reg    p_Input_local_ce1;
reg    p_Input_local_we1;
wire   [7:0] p_Input_local_q1;
reg   [8:0] X_reg_241;
reg    ap_block_state1;
reg   [2:0] ap_phi_mux_i_phi_fu_256_p4;
reg   [8:0] Y_reg_264;
wire    ap_CS_fsm_state79;
reg   [16:0] phi_mul_reg_275;
reg   [2:0] ap_phi_mux_i_1_phi_fu_291_p4;
wire    ap_block_pp1_stage0;
reg   [17:0] ap_phi_mux_Sum_phi_fu_314_p4;
wire    ap_block_pp2_stage0;
wire   [63:0] i_cast5_fu_373_p1;
wire   [63:0] zext_ln98_fu_408_p1;
wire   [63:0] i_1_cast_fu_413_p1;
wire   [63:0] zext_ln100_fu_455_p1;
wire   [63:0] add_ln94_2_fu_362_p2;
wire   [63:0] add_ln99_1_fu_428_p2;
wire   [63:0] add_ln106_1_fu_473_p2;
wire  signed [11:0] grp_fu_495_p3;
wire   [63:0] zext_ln94_fu_359_p1;
wire   [16:0] add_ln99_fu_418_p2;
wire   [63:0] zext_ln99_1_fu_424_p1;
wire   [63:0] add_ln106_fu_469_p2;
wire   [2:0] grp_fu_495_p0;
wire   [9:0] grp_fu_495_p1;
wire  signed [9:0] grp_fu_495_p2;
wire   [6:0] grp_fu_504_p0;
wire   [7:0] grp_fu_504_p1;
reg    grp_fu_495_ce;
reg   [150:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [11:0] grp_fu_495_p00;
wire   [14:0] grp_fu_504_p00;
wire   [14:0] grp_fu_504_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 151'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter74 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp0_iter72 = 1'b0;
#0 ap_enable_reg_pp0_iter73 = 1'b0;
#0 ap_enable_reg_pp0_iter75 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
end

Filter_vertical_HW_p_Coefficients_local #(
    .DataWidth( 7 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
p_Coefficients_local_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p_Coefficients_local_address0),
    .ce0(p_Coefficients_local_ce0),
    .q0(p_Coefficients_local_q0)
);

Filter_vertical_HW_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .Input_r(Input_r),
    .Output_r(Output_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

Filter_vertical_HW_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_2_reg_650),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Filter_vertical_HW_p_Input_local #(
    .DataWidth( 8 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
p_Input_local_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p_Input_local_address0),
    .ce0(p_Input_local_ce0),
    .we0(p_Input_local_we0),
    .d0(p_Input_local_d0),
    .q0(p_Input_local_q0),
    .address1(p_Input_local_address1),
    .ce1(p_Input_local_ce1),
    .we1(p_Input_local_we1),
    .d1(gmem_addr_1_read_reg_606),
    .q1(p_Input_local_q1)
);

Filter_vertical_HW_mac_muladd_3ns_10ns_10s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
mac_muladd_3ns_10ns_10s_12_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_495_p0),
    .din1(grp_fu_495_p1),
    .din2(grp_fu_495_p2),
    .ce(grp_fu_495_ce),
    .dout(grp_fu_495_p3)
);

Filter_vertical_HW_mac_muladd_7ns_8ns_18ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_7ns_8ns_18ns_18_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_504_p0),
    .din1(grp_fu_504_p1),
    .din2(ap_phi_mux_Sum_phi_fu_314_p4),
    .ce(1'b1),
    .dout(grp_fu_504_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln93_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln93_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter72 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter73 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter74 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter75 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
        end else if (((icmp_ln93_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter75 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state81))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln95_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state80))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state81))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state81);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln95_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state80))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state156))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state155)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state156)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state156);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if ((1'b1 == ap_CS_fsm_state155)) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state155)) begin
        Sum_reg_310 <= 18'd0;
    end else if (((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln100_reg_621_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        Sum_reg_310 <= grp_fu_504_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        X_reg_241 <= 9'd0;
    end else if (((icmp_ln95_fu_390_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        X_reg_241 <= add_ln93_reg_527;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        Y_reg_264 <= 9'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state231))) begin
        Y_reg_264 <= add_ln95_reg_572;
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state80))) begin
        i_1_reg_287 <= 3'd0;
    end else if (((icmp_ln98_reg_591 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        i_1_reg_287 <= add_ln98_reg_586;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state155)) begin
        i_2_reg_299 <= 3'd0;
    end else if (((icmp_ln100_fu_449_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_2_reg_299 <= add_ln100_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_252 <= 3'd1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln94_reg_547 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_252 <= add_ln94_3_reg_551;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        phi_mul_reg_275 <= 17'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state231))) begin
        phi_mul_reg_275 <= add_ln95_1_reg_577;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln93_reg_527 <= add_ln93_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln94_fu_343_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln94_3_reg_551 <= add_ln94_3_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln94_reg_541 <= add_ln94_fu_338_p2;
        zext_ln93_reg_536[8 : 0] <= zext_ln93_fu_334_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        add_ln95_1_reg_577 <= add_ln95_1_fu_384_p2;
        add_ln95_reg_572 <= add_ln95_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln98_reg_586 <= add_ln98_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state154)) begin
        gmem_addr_1_read_reg_606 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        gmem_addr_1_reg_600 <= add_ln99_1_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        gmem_addr_2_reg_650 <= add_ln106_1_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_reg_547_pp0_iter73_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_567 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_reg_547_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_reg_561 <= add_ln94_2_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_reg_252_pp0_iter10_reg <= i_reg_252_pp0_iter9_reg;
        i_reg_252_pp0_iter11_reg <= i_reg_252_pp0_iter10_reg;
        i_reg_252_pp0_iter12_reg <= i_reg_252_pp0_iter11_reg;
        i_reg_252_pp0_iter13_reg <= i_reg_252_pp0_iter12_reg;
        i_reg_252_pp0_iter14_reg <= i_reg_252_pp0_iter13_reg;
        i_reg_252_pp0_iter15_reg <= i_reg_252_pp0_iter14_reg;
        i_reg_252_pp0_iter16_reg <= i_reg_252_pp0_iter15_reg;
        i_reg_252_pp0_iter17_reg <= i_reg_252_pp0_iter16_reg;
        i_reg_252_pp0_iter18_reg <= i_reg_252_pp0_iter17_reg;
        i_reg_252_pp0_iter19_reg <= i_reg_252_pp0_iter18_reg;
        i_reg_252_pp0_iter20_reg <= i_reg_252_pp0_iter19_reg;
        i_reg_252_pp0_iter21_reg <= i_reg_252_pp0_iter20_reg;
        i_reg_252_pp0_iter22_reg <= i_reg_252_pp0_iter21_reg;
        i_reg_252_pp0_iter23_reg <= i_reg_252_pp0_iter22_reg;
        i_reg_252_pp0_iter24_reg <= i_reg_252_pp0_iter23_reg;
        i_reg_252_pp0_iter25_reg <= i_reg_252_pp0_iter24_reg;
        i_reg_252_pp0_iter26_reg <= i_reg_252_pp0_iter25_reg;
        i_reg_252_pp0_iter27_reg <= i_reg_252_pp0_iter26_reg;
        i_reg_252_pp0_iter28_reg <= i_reg_252_pp0_iter27_reg;
        i_reg_252_pp0_iter29_reg <= i_reg_252_pp0_iter28_reg;
        i_reg_252_pp0_iter2_reg <= i_reg_252_pp0_iter1_reg;
        i_reg_252_pp0_iter30_reg <= i_reg_252_pp0_iter29_reg;
        i_reg_252_pp0_iter31_reg <= i_reg_252_pp0_iter30_reg;
        i_reg_252_pp0_iter32_reg <= i_reg_252_pp0_iter31_reg;
        i_reg_252_pp0_iter33_reg <= i_reg_252_pp0_iter32_reg;
        i_reg_252_pp0_iter34_reg <= i_reg_252_pp0_iter33_reg;
        i_reg_252_pp0_iter35_reg <= i_reg_252_pp0_iter34_reg;
        i_reg_252_pp0_iter36_reg <= i_reg_252_pp0_iter35_reg;
        i_reg_252_pp0_iter37_reg <= i_reg_252_pp0_iter36_reg;
        i_reg_252_pp0_iter38_reg <= i_reg_252_pp0_iter37_reg;
        i_reg_252_pp0_iter39_reg <= i_reg_252_pp0_iter38_reg;
        i_reg_252_pp0_iter3_reg <= i_reg_252_pp0_iter2_reg;
        i_reg_252_pp0_iter40_reg <= i_reg_252_pp0_iter39_reg;
        i_reg_252_pp0_iter41_reg <= i_reg_252_pp0_iter40_reg;
        i_reg_252_pp0_iter42_reg <= i_reg_252_pp0_iter41_reg;
        i_reg_252_pp0_iter43_reg <= i_reg_252_pp0_iter42_reg;
        i_reg_252_pp0_iter44_reg <= i_reg_252_pp0_iter43_reg;
        i_reg_252_pp0_iter45_reg <= i_reg_252_pp0_iter44_reg;
        i_reg_252_pp0_iter46_reg <= i_reg_252_pp0_iter45_reg;
        i_reg_252_pp0_iter47_reg <= i_reg_252_pp0_iter46_reg;
        i_reg_252_pp0_iter48_reg <= i_reg_252_pp0_iter47_reg;
        i_reg_252_pp0_iter49_reg <= i_reg_252_pp0_iter48_reg;
        i_reg_252_pp0_iter4_reg <= i_reg_252_pp0_iter3_reg;
        i_reg_252_pp0_iter50_reg <= i_reg_252_pp0_iter49_reg;
        i_reg_252_pp0_iter51_reg <= i_reg_252_pp0_iter50_reg;
        i_reg_252_pp0_iter52_reg <= i_reg_252_pp0_iter51_reg;
        i_reg_252_pp0_iter53_reg <= i_reg_252_pp0_iter52_reg;
        i_reg_252_pp0_iter54_reg <= i_reg_252_pp0_iter53_reg;
        i_reg_252_pp0_iter55_reg <= i_reg_252_pp0_iter54_reg;
        i_reg_252_pp0_iter56_reg <= i_reg_252_pp0_iter55_reg;
        i_reg_252_pp0_iter57_reg <= i_reg_252_pp0_iter56_reg;
        i_reg_252_pp0_iter58_reg <= i_reg_252_pp0_iter57_reg;
        i_reg_252_pp0_iter59_reg <= i_reg_252_pp0_iter58_reg;
        i_reg_252_pp0_iter5_reg <= i_reg_252_pp0_iter4_reg;
        i_reg_252_pp0_iter60_reg <= i_reg_252_pp0_iter59_reg;
        i_reg_252_pp0_iter61_reg <= i_reg_252_pp0_iter60_reg;
        i_reg_252_pp0_iter62_reg <= i_reg_252_pp0_iter61_reg;
        i_reg_252_pp0_iter63_reg <= i_reg_252_pp0_iter62_reg;
        i_reg_252_pp0_iter64_reg <= i_reg_252_pp0_iter63_reg;
        i_reg_252_pp0_iter65_reg <= i_reg_252_pp0_iter64_reg;
        i_reg_252_pp0_iter66_reg <= i_reg_252_pp0_iter65_reg;
        i_reg_252_pp0_iter67_reg <= i_reg_252_pp0_iter66_reg;
        i_reg_252_pp0_iter68_reg <= i_reg_252_pp0_iter67_reg;
        i_reg_252_pp0_iter69_reg <= i_reg_252_pp0_iter68_reg;
        i_reg_252_pp0_iter6_reg <= i_reg_252_pp0_iter5_reg;
        i_reg_252_pp0_iter70_reg <= i_reg_252_pp0_iter69_reg;
        i_reg_252_pp0_iter71_reg <= i_reg_252_pp0_iter70_reg;
        i_reg_252_pp0_iter72_reg <= i_reg_252_pp0_iter71_reg;
        i_reg_252_pp0_iter73_reg <= i_reg_252_pp0_iter72_reg;
        i_reg_252_pp0_iter74_reg <= i_reg_252_pp0_iter73_reg;
        i_reg_252_pp0_iter7_reg <= i_reg_252_pp0_iter6_reg;
        i_reg_252_pp0_iter8_reg <= i_reg_252_pp0_iter7_reg;
        i_reg_252_pp0_iter9_reg <= i_reg_252_pp0_iter8_reg;
        icmp_ln94_reg_547_pp0_iter10_reg <= icmp_ln94_reg_547_pp0_iter9_reg;
        icmp_ln94_reg_547_pp0_iter11_reg <= icmp_ln94_reg_547_pp0_iter10_reg;
        icmp_ln94_reg_547_pp0_iter12_reg <= icmp_ln94_reg_547_pp0_iter11_reg;
        icmp_ln94_reg_547_pp0_iter13_reg <= icmp_ln94_reg_547_pp0_iter12_reg;
        icmp_ln94_reg_547_pp0_iter14_reg <= icmp_ln94_reg_547_pp0_iter13_reg;
        icmp_ln94_reg_547_pp0_iter15_reg <= icmp_ln94_reg_547_pp0_iter14_reg;
        icmp_ln94_reg_547_pp0_iter16_reg <= icmp_ln94_reg_547_pp0_iter15_reg;
        icmp_ln94_reg_547_pp0_iter17_reg <= icmp_ln94_reg_547_pp0_iter16_reg;
        icmp_ln94_reg_547_pp0_iter18_reg <= icmp_ln94_reg_547_pp0_iter17_reg;
        icmp_ln94_reg_547_pp0_iter19_reg <= icmp_ln94_reg_547_pp0_iter18_reg;
        icmp_ln94_reg_547_pp0_iter20_reg <= icmp_ln94_reg_547_pp0_iter19_reg;
        icmp_ln94_reg_547_pp0_iter21_reg <= icmp_ln94_reg_547_pp0_iter20_reg;
        icmp_ln94_reg_547_pp0_iter22_reg <= icmp_ln94_reg_547_pp0_iter21_reg;
        icmp_ln94_reg_547_pp0_iter23_reg <= icmp_ln94_reg_547_pp0_iter22_reg;
        icmp_ln94_reg_547_pp0_iter24_reg <= icmp_ln94_reg_547_pp0_iter23_reg;
        icmp_ln94_reg_547_pp0_iter25_reg <= icmp_ln94_reg_547_pp0_iter24_reg;
        icmp_ln94_reg_547_pp0_iter26_reg <= icmp_ln94_reg_547_pp0_iter25_reg;
        icmp_ln94_reg_547_pp0_iter27_reg <= icmp_ln94_reg_547_pp0_iter26_reg;
        icmp_ln94_reg_547_pp0_iter28_reg <= icmp_ln94_reg_547_pp0_iter27_reg;
        icmp_ln94_reg_547_pp0_iter29_reg <= icmp_ln94_reg_547_pp0_iter28_reg;
        icmp_ln94_reg_547_pp0_iter2_reg <= icmp_ln94_reg_547_pp0_iter1_reg;
        icmp_ln94_reg_547_pp0_iter30_reg <= icmp_ln94_reg_547_pp0_iter29_reg;
        icmp_ln94_reg_547_pp0_iter31_reg <= icmp_ln94_reg_547_pp0_iter30_reg;
        icmp_ln94_reg_547_pp0_iter32_reg <= icmp_ln94_reg_547_pp0_iter31_reg;
        icmp_ln94_reg_547_pp0_iter33_reg <= icmp_ln94_reg_547_pp0_iter32_reg;
        icmp_ln94_reg_547_pp0_iter34_reg <= icmp_ln94_reg_547_pp0_iter33_reg;
        icmp_ln94_reg_547_pp0_iter35_reg <= icmp_ln94_reg_547_pp0_iter34_reg;
        icmp_ln94_reg_547_pp0_iter36_reg <= icmp_ln94_reg_547_pp0_iter35_reg;
        icmp_ln94_reg_547_pp0_iter37_reg <= icmp_ln94_reg_547_pp0_iter36_reg;
        icmp_ln94_reg_547_pp0_iter38_reg <= icmp_ln94_reg_547_pp0_iter37_reg;
        icmp_ln94_reg_547_pp0_iter39_reg <= icmp_ln94_reg_547_pp0_iter38_reg;
        icmp_ln94_reg_547_pp0_iter3_reg <= icmp_ln94_reg_547_pp0_iter2_reg;
        icmp_ln94_reg_547_pp0_iter40_reg <= icmp_ln94_reg_547_pp0_iter39_reg;
        icmp_ln94_reg_547_pp0_iter41_reg <= icmp_ln94_reg_547_pp0_iter40_reg;
        icmp_ln94_reg_547_pp0_iter42_reg <= icmp_ln94_reg_547_pp0_iter41_reg;
        icmp_ln94_reg_547_pp0_iter43_reg <= icmp_ln94_reg_547_pp0_iter42_reg;
        icmp_ln94_reg_547_pp0_iter44_reg <= icmp_ln94_reg_547_pp0_iter43_reg;
        icmp_ln94_reg_547_pp0_iter45_reg <= icmp_ln94_reg_547_pp0_iter44_reg;
        icmp_ln94_reg_547_pp0_iter46_reg <= icmp_ln94_reg_547_pp0_iter45_reg;
        icmp_ln94_reg_547_pp0_iter47_reg <= icmp_ln94_reg_547_pp0_iter46_reg;
        icmp_ln94_reg_547_pp0_iter48_reg <= icmp_ln94_reg_547_pp0_iter47_reg;
        icmp_ln94_reg_547_pp0_iter49_reg <= icmp_ln94_reg_547_pp0_iter48_reg;
        icmp_ln94_reg_547_pp0_iter4_reg <= icmp_ln94_reg_547_pp0_iter3_reg;
        icmp_ln94_reg_547_pp0_iter50_reg <= icmp_ln94_reg_547_pp0_iter49_reg;
        icmp_ln94_reg_547_pp0_iter51_reg <= icmp_ln94_reg_547_pp0_iter50_reg;
        icmp_ln94_reg_547_pp0_iter52_reg <= icmp_ln94_reg_547_pp0_iter51_reg;
        icmp_ln94_reg_547_pp0_iter53_reg <= icmp_ln94_reg_547_pp0_iter52_reg;
        icmp_ln94_reg_547_pp0_iter54_reg <= icmp_ln94_reg_547_pp0_iter53_reg;
        icmp_ln94_reg_547_pp0_iter55_reg <= icmp_ln94_reg_547_pp0_iter54_reg;
        icmp_ln94_reg_547_pp0_iter56_reg <= icmp_ln94_reg_547_pp0_iter55_reg;
        icmp_ln94_reg_547_pp0_iter57_reg <= icmp_ln94_reg_547_pp0_iter56_reg;
        icmp_ln94_reg_547_pp0_iter58_reg <= icmp_ln94_reg_547_pp0_iter57_reg;
        icmp_ln94_reg_547_pp0_iter59_reg <= icmp_ln94_reg_547_pp0_iter58_reg;
        icmp_ln94_reg_547_pp0_iter5_reg <= icmp_ln94_reg_547_pp0_iter4_reg;
        icmp_ln94_reg_547_pp0_iter60_reg <= icmp_ln94_reg_547_pp0_iter59_reg;
        icmp_ln94_reg_547_pp0_iter61_reg <= icmp_ln94_reg_547_pp0_iter60_reg;
        icmp_ln94_reg_547_pp0_iter62_reg <= icmp_ln94_reg_547_pp0_iter61_reg;
        icmp_ln94_reg_547_pp0_iter63_reg <= icmp_ln94_reg_547_pp0_iter62_reg;
        icmp_ln94_reg_547_pp0_iter64_reg <= icmp_ln94_reg_547_pp0_iter63_reg;
        icmp_ln94_reg_547_pp0_iter65_reg <= icmp_ln94_reg_547_pp0_iter64_reg;
        icmp_ln94_reg_547_pp0_iter66_reg <= icmp_ln94_reg_547_pp0_iter65_reg;
        icmp_ln94_reg_547_pp0_iter67_reg <= icmp_ln94_reg_547_pp0_iter66_reg;
        icmp_ln94_reg_547_pp0_iter68_reg <= icmp_ln94_reg_547_pp0_iter67_reg;
        icmp_ln94_reg_547_pp0_iter69_reg <= icmp_ln94_reg_547_pp0_iter68_reg;
        icmp_ln94_reg_547_pp0_iter6_reg <= icmp_ln94_reg_547_pp0_iter5_reg;
        icmp_ln94_reg_547_pp0_iter70_reg <= icmp_ln94_reg_547_pp0_iter69_reg;
        icmp_ln94_reg_547_pp0_iter71_reg <= icmp_ln94_reg_547_pp0_iter70_reg;
        icmp_ln94_reg_547_pp0_iter72_reg <= icmp_ln94_reg_547_pp0_iter71_reg;
        icmp_ln94_reg_547_pp0_iter73_reg <= icmp_ln94_reg_547_pp0_iter72_reg;
        icmp_ln94_reg_547_pp0_iter74_reg <= icmp_ln94_reg_547_pp0_iter73_reg;
        icmp_ln94_reg_547_pp0_iter7_reg <= icmp_ln94_reg_547_pp0_iter6_reg;
        icmp_ln94_reg_547_pp0_iter8_reg <= icmp_ln94_reg_547_pp0_iter7_reg;
        icmp_ln94_reg_547_pp0_iter9_reg <= icmp_ln94_reg_547_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_252_pp0_iter1_reg <= i_reg_252;
        icmp_ln94_reg_547 <= icmp_ln94_fu_343_p2;
        icmp_ln94_reg_547_pp0_iter1_reg <= icmp_ln94_reg_547;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln100_reg_621 <= icmp_ln100_fu_449_p2;
        icmp_ln100_reg_621_pp2_iter1_reg <= icmp_ln100_reg_621;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln100_reg_621_pp2_iter2_reg <= icmp_ln100_reg_621_pp2_iter1_reg;
        icmp_ln100_reg_621_pp2_iter3_reg <= icmp_ln100_reg_621_pp2_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln98_reg_591 <= icmp_ln98_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state155)) begin
        zext_ln99_reg_611[16 : 0] <= zext_ln99_fu_439_p1[16 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln94_fu_343_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln98_fu_402_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state81 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state81 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln100_fu_449_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state156 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state156 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter74 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b0) & (ap_enable_reg_pp0_iter73 == 1'b0) & (ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln100_reg_621_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_Sum_phi_fu_314_p4 = grp_fu_504_p3;
    end else begin
        ap_phi_mux_Sum_phi_fu_314_p4 = Sum_reg_310;
    end
end

always @ (*) begin
    if (((icmp_ln98_reg_591 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_i_1_phi_fu_291_p4 = add_ln98_reg_586;
    end else begin
        ap_phi_mux_i_1_phi_fu_291_p4 = i_1_reg_287;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln94_reg_547 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_256_p4 = add_ln94_3_reg_551;
    end else begin
        ap_phi_mux_i_phi_fu_256_p4 = i_reg_252;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
        gmem_ARADDR = gmem_addr_1_reg_600;
    end else if (((icmp_ln94_reg_547_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        gmem_ARADDR = gmem_addr_reg_561;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln94_reg_547_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state84)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state162))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state231))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln94_reg_547_pp0_iter73_reg == 1'd0) & (ap_enable_reg_pp0_iter74 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state154)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state163))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state84) | ((icmp_ln94_reg_547_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state162)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state231)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state154) | ((icmp_ln94_reg_547_pp0_iter73_reg == 1'd0) & (ap_enable_reg_pp0_iter74 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state163)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_495_ce = 1'b1;
    end else begin
        grp_fu_495_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        p_Coefficients_local_ce0 = 1'b1;
    end else begin
        p_Coefficients_local_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        p_Input_local_address0 = zext_ln100_fu_455_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        p_Input_local_address0 = i_1_cast_fu_413_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter75 == 1'b1))) begin
        p_Input_local_address0 = i_cast5_fu_373_p1;
    end else begin
        p_Input_local_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state155)) begin
        p_Input_local_address1 = 64'd6;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_Input_local_address1 = zext_ln98_fu_408_p1;
    end else begin
        p_Input_local_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter75 == 1'b1)))) begin
        p_Input_local_ce0 = 1'b1;
    end else begin
        p_Input_local_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state155) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        p_Input_local_ce1 = 1'b1;
    end else begin
        p_Input_local_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        p_Input_local_d0 = p_Input_local_q1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter75 == 1'b1))) begin
        p_Input_local_d0 = gmem_addr_read_reg_567;
    end else begin
        p_Input_local_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln94_reg_547_pp0_iter74_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter75 == 1'b1)) | ((icmp_ln98_reg_591 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        p_Input_local_we0 = 1'b1;
    end else begin
        p_Input_local_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state155)) begin
        p_Input_local_we1 = 1'b1;
    end else begin
        p_Input_local_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln93_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln94_fu_343_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter74 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter75 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln94_fu_343_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter74 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter75 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if (((icmp_ln95_fu_390_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln98_fu_402_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln98_fu_402_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state154))) begin
                ap_NS_fsm = ap_ST_fsm_state155;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln100_fu_449_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b0)) | ((icmp_ln100_fu_449_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state162))) begin
                ap_NS_fsm = ap_ST_fsm_state163;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state162;
            end
        end
        ap_ST_fsm_state163 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state163))) begin
                ap_NS_fsm = ap_ST_fsm_state164;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state163;
            end
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state231))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state231;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_443_p2 = (i_2_reg_299 + 3'd1);

assign add_ln106_1_fu_473_p2 = (add_ln106_fu_469_p2 + zext_ln93_reg_536);

assign add_ln106_fu_469_p2 = (zext_ln99_reg_611 + Output_r);

assign add_ln93_fu_322_p2 = (X_reg_241 + 9'd1);

assign add_ln94_2_fu_362_p2 = (zext_ln94_fu_359_p1 + add_ln94_reg_541);

assign add_ln94_3_fu_349_p2 = (ap_phi_mux_i_phi_fu_256_p4 + 3'd1);

assign add_ln94_fu_338_p2 = (zext_ln93_fu_334_p1 + Input_r);

assign add_ln95_1_fu_384_p2 = (phi_mul_reg_275 + 17'd474);

assign add_ln95_fu_378_p2 = (Y_reg_264 + 9'd1);

assign add_ln98_fu_396_p2 = (ap_phi_mux_i_1_phi_fu_291_p4 + 3'd1);

assign add_ln99_1_fu_428_p2 = (zext_ln99_1_fu_424_p1 + add_ln94_reg_541);

assign add_ln99_fu_418_p2 = (phi_mul_reg_275 + 17'd2844);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state231 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gmem_RVALID == 1'b0) & (icmp_ln94_reg_547_pp0_iter73_reg == 1'd0) & (ap_enable_reg_pp0_iter74 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state7_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gmem_RVALID == 1'b0) & (icmp_ln94_reg_547_pp0_iter73_reg == 1'd0) & (ap_enable_reg_pp0_iter74 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state7_io)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state156_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state157_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state158_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state159_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state160_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter70 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter71 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter72 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage0_iter73 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state77_pp0_stage0_iter74 = ((gmem_RVALID == 1'b0) & (icmp_ln94_reg_547_pp0_iter73_reg == 1'd0));
end

assign ap_block_state78_pp0_stage0_iter75 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((gmem_ARREADY == 1'b0) & (icmp_ln94_reg_547_pp0_iter3_reg == 1'd0));
end

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign gmem_WDATA = {{Sum_reg_310[15:8]}};

assign grp_fu_495_p0 = grp_fu_495_p00;

assign grp_fu_495_p00 = ap_phi_mux_i_phi_fu_256_p4;

assign grp_fu_495_p1 = 12'd474;

assign grp_fu_495_p2 = 12'd3622;

assign grp_fu_504_p0 = grp_fu_504_p00;

assign grp_fu_504_p00 = p_Coefficients_local_q0;

assign grp_fu_504_p1 = grp_fu_504_p10;

assign grp_fu_504_p10 = p_Input_local_q0;

assign i_1_cast_fu_413_p1 = i_1_reg_287;

assign i_cast5_fu_373_p1 = i_reg_252_pp0_iter74_reg;

assign icmp_ln100_fu_449_p2 = ((i_2_reg_299 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_328_p2 = ((X_reg_241 == 9'd474) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_343_p2 = ((ap_phi_mux_i_phi_fu_256_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_390_p2 = ((Y_reg_264 == 9'd264) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_402_p2 = ((ap_phi_mux_i_1_phi_fu_291_p4 == 3'd6) ? 1'b1 : 1'b0);

assign p_Coefficients_local_address0 = zext_ln100_fu_455_p1;

assign zext_ln100_fu_455_p1 = i_2_reg_299;

assign zext_ln93_fu_334_p1 = X_reg_241;

assign zext_ln94_fu_359_p1 = $unsigned(grp_fu_495_p3);

assign zext_ln98_fu_408_p1 = add_ln98_fu_396_p2;

assign zext_ln99_1_fu_424_p1 = add_ln99_fu_418_p2;

assign zext_ln99_fu_439_p1 = phi_mul_reg_275;

always @ (posedge ap_clk) begin
    zext_ln93_reg_536[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln99_reg_611[63:17] <= 47'b00000000000000000000000000000000000000000000000;
end

endmodule //Filter_vertical_HW
